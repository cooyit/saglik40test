
/* PK veri tipi seçimi hakkında                  */ 

-- `dil_id` sütunu için `INTEGER GENERATED BY DEFAULT AS IDENTITY` kullanıldı.
-- Bunun nedeni:
-- 1. `SERIAL` tipi PostgreSQL’de eski bir yaklaşımdır ve arka planda bir sequence oluşturur ama modern `IDENTITY` yapısı kadar esnek değildir.
-- 2. `GENERATED BY DEFAULT AS IDENTITY` ifadesi SQL standardına uygundur ve PostgreSQL 10+ sürümleriyle önerilen yaklaşımdır.
-- 3. `BY DEFAULT` ifadesi, uygulama tarafından manuel ID atamasına izin verir; bu, bazı özel durumlarda faydalı olabilir.
--    Örneğin test verisi yüklerken veya migration yaparken elle ID vermek istenebilir.
-- 4. `GENERATED ALWAYS` olsaydı, manuel ID atamaları reddedilirdi — bu katı kısıt bazen gereksiz sınırlamalara yol açabilir.
-- Bu nedenle, esneklik ve modern uyumluluk için `BY DEFAULT` tercih edilmiştir.

-- a: id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY
-- b: id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 'a' ile 'b' aynı işlevin açık ve kısa yazımıdır


/* seçilen veri tipleri ve kapladıkları alan     */

-- int : 4 byte
-- varchar(128) : 1-132 byte

/* Tablolar ve Birincil Anahtar (PK) Oluşumu     */

-- Sütun adları snake_case yapıldı (PostgreSQL’de yaygın, tırnaksız kullanım kolaylığı sağlar).









-- diller tablosu
-- Amaç: Desteklenen dillerin temel listesini tutar (ör: Türkçe, İngilizce, Fransızca)

CREATE TABLE diller (
    dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    dil_adi VARCHAR(64) NOT NULL                                
);

-- ulkeler tablosu
-- Amaç: Ülkelerin listesini tutar

CREATE TABLE ulkeler (
    ulke_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_adi VARCHAR(64)  NOT NULL                                       
);

-- sehirler tablosu
-- Amaç: Her ülkeye bağlı şehirleri tanımlar. Bölge, NUTS gibi sınıflandırma bilgileri içerir.

CREATE TABLE sehirler (
    sehir_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_id INTEGER NOT NULL,               -- FK: ulkeler tablosuna bağlanır
    sehir_adi VARCHAR(64) NOT NULL,         
    bolge_adi VARCHAR(64),         
    nuts_adi VARCHAR(5)            -- Avrupa Birliği NUTS sınıflandırması (varsa)
);

-- UlkelerDiller tablosu
-- Amaç: Her ülkenin birden fazla dili olabilir ama yalnızca bir tanesi varsayılan olabilir.

CREATE TABLE ulke_dil (
    ulke_dil_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ulke_id INTEGER,             -- FK: ulkeler tablosu
    dil_id INTEGER,              -- FK: diller tablosu
    varsayilan BOOLEAN           -- TRUE ise ülke için varsayılan dil
    -- Not: Uygulama düzeyinde constraint eklenmeli → Bir ülke için yalnızca 1 varsayılan dil olabilir
);

-- model_turu tablosu
-- Amaç: Model türü bilgilerini tutar (ör: Puan esaslı, Seviye esaslı)

CREATE TABLE model_turleri (
    model_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_turu_adi VARCHAR(32)  
);

-- hastane_turleri tablosu
-- Amaç: Hastane türlerini ve hiyerarşik yapısını tanımlar
-- ? devlet veya özel hastane mi?

CREATE TABLE hastane_turleri (
    hastane_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_hastane_turu_id INTEGER,    -- recursive FK (dil desteği)
    hastane_turu_adi VARCHAR(128),
    dil_adi VARCHAR(64)             
);

-- kullanici_turleri tablosu
-- Amaç: Kullanıcı türlerini ve açıklamalarını saklar

CREATE TABLE kullanici_turleri (
    kullanici_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_kullanici_turu_id INTEGER,   -- recursive FK (dil desteği)
    kullanici_turu_adi VARCHAR(64),
    aciklama TEXT,
    dil_adi VARCHAR(64)              
);


-- seviyeler tablosu
-- Aynı seviye, farklı dillerde gösterilebilir (örn: 'Seviye 1' → 'Level 1')

CREATE TABLE seviyeler (
    seviye_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_seviye_id INTEGER,      -- recursive FK (dil desteği)
    seviye_adi VARCHAR(32),     
    dil_adi VARCHAR(64)         
);



-- modeller tablosu 

CREATE TABLE modeller (
    model_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_model_id INTEGER,             -- recursive FK (dil desteği)
    model_turu_id INTEGER,            -- FK model_turu tablosu
    model_resmi_adi VARCHAR(128),     
    model_alias_adi VARCHAR(128),
    model_aciklama TEXT,
	kullanici_kapsami VARCHAR(32),  -- 'Tek' veya 'Coklu' değerleri
    aktif SMALLINT,                    -- 0: pasif, 1: aktif, 2: taslak
    devreye_alma_tarihi DATE,
    devreden_kaldirilma_tarihi DATE,
    dil_adi VARCHAR(64)               
);


/* ---------------------------------------------
- ust_model_id(recursive FK) Kendi kendine bağlanır 
- ON DELETE SET NULL: Üst model silinirse, alt modeller kopmaz ama ust_model_id boş kalır
- ON UPDATE CASCADE: Üst modelin model_id'si değişirse (normalde değişmez ama güvenlik için), bağlı alt modeller de güncellenir
-- NOT NULL: kaldırıldı (geliştirme aşamasında esnek kalsın)
--------------------------------------------- */

-- model_ulke tablosu
-- Amaç: Bir modelin hangi ülkelerde devreye alındığını ve aktiflik durumunu izlemek.
-- Bu yapı sayesinde model bazlı ülke yayılımı, dil ve geçerlilik kontrolü sağlanır.

CREATE TABLE model_ulke (
    model_ulke_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ulke_id INTEGER,                -- FK: ulkeler tablosu
    model_id INTEGER,               -- FK: modeller tablosu
    devreye_alma_tarihi DATE,       -- Modelin ilgili ülkedeki devreye giriş tarihi
    dil_adi VARCHAR(64),            -- Modelin bu ülkede kullanılacağı dil (görsel/tanımlayıcı amaçlı)
    aktif BOOLEAN  --DEFAULT FALSE  -- 0: atanmış ama geçerli değil, 1: devrede
    -- Not: İlk kayıt açıldığında aktif=false olarak gelir, manuel onay süreci sonunda aktif=true yapılır
);


-- model_seviye tablosu
-- Amaç: Her modelin sahip olabileceği seviyeleri ilişkilendirmek için kullanılır.

CREATE TABLE model_seviye (
    model_seviye_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,      -- FK: modeller tablosu
    seviye_id INTEGER       -- FK: seviyeler tablosu
);



-- model_hastane_turu tablosu
-- Amaç: Modellerin hangi hastane türlerine uygulanabilir olduğunu tanımlar.
-- N-N ilişki yapısı kurulur: bir model birden fazla hastane türüne, bir hastane türü birden fazla modele ait olabilir.

CREATE TABLE model_hastane_turu (
    model_hastane_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,            -- FK: modeller tablosu
    hastane_turu_id INTEGER      -- FK: hastane_turleri tablosu
);


-- model_kullanici_kapsami tablosu
-- Amaç: Bir modelin hangi kullanıcı türlerine göre özelleştirileceğini tanımlar.
-- N-N ilişki kurulur: bir model birden fazla kullanıcı türünü kapsayabilir.

CREATE TABLE model_kullanici_kapsami (
    model_kullanici_kapsami_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    kullanici_turu_id INTEGER,  -- FK: kullanici_turleri tablosu
    model_id INTEGER             -- FK: modeller tablosu
);


-- boyutlar tablosu
-- Amaç: Modellerin yapısal bileşenleri olan boyutları tanımlar.

CREATE TABLE boyutlar (
    boyut_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_boyut_id INTEGER,              -- recursive FK (dil desteği)
    boyut_id_hiyerarsi INTEGER,        
    boyut_adi VARCHAR(255) ,   		
    boyut_allias VARCHAR(255) ,		
    boyut_etiketleri TEXT,             
    hiyerarsi INTEGER,                 -- Frontend TreeView bileşeni için hiyerarşik seviye (görsel)
    aktif SMALLINT,                    -- 0: pasif, 1: aktif, 2: taslak
    dil_adi VARCHAR(64)                -- Çok dilli destek
);

/*
ust_boyut_id INTEGER,
 Aynı boyutun farklı dildeki karşılıklarını birbirine bağlar (recursive FK).
 Örn: "Patient Safety" → "Hasta Güvenliği"
 Ana boyut, Türkçe tanım olur; diğer diller üst boyuta referans verir.

boyut_id_hiyerarsi INTEGER,
 Boyutlar arası hiyerarşik bağlantıyı kurar (kategori / alt kategori).
 Örn: "Hasta Güvenliği" alt boyut olarak "Kalite Yönetimi"ne bağlıysa, burada o üst boyutun ID’si yazılır.
 Frontend TreeView ve yapısal filtreleme için kullanılır.
*/



-- kriterler tablosu
-- Amaç: Boyutlara bağlı değerlendirilecek kriterleri tanımlar.

CREATE TABLE kriterler (
    kriter_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_kriter_id INTEGER,          -- recursive FK (dil desteği)
    kriter_adi TEXT,                
    kriter_alias VARCHAR(128),       
    kriter_etiketleri TEXT,         
    dil_adi VARCHAR(64),            
    aktif SMALLINT                  -- 0: pasif, 1: aktif, 2: taslak
);



-- gostergeler tablosu
-- Amaç: Kriterlere bağlı değerlendirici soruların (göstergelerin) tanımını yapar.

CREATE TABLE gostergeler (
    gosterge_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_id INTEGER,           -- recursive FK (dil desteği)
	gosterge_adi TEXT ,             
    gosterge_allias VARCHAR(255),      
    gosterge_etiketleri TEXT,          
    gosterge_aciklamasi TEXT,          
    gosterge_ornek_uygulama TEXT,      
    dil_adi VARCHAR(64), 
    aktif SMALLINT                     -- 0: pasif, 1: aktif, 2: taslak
);


-- gosterge_cevap_turleri tablosu
-- Amaç: Göstergelere ait cevap türlerini tanımlar (ör: Evet/Hayır, Likert vb.)

CREATE TABLE gosterge_cevap_turleri (
    gosterge_cevap_turu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gosterge_cevap_turu VARCHAR(64) 
    
);


-- gosterge_cevap_sablonlari tablosu
-- Amaç: Göstergelere bağlı ön tanımlı cevap şablonlarını tanımlar.
-- Aynı gösterge için farklı cevap türlerinde (Likert, Evet/Hayır vb.) farklı şablonlar oluşturulabilir.

CREATE TABLE gosterge_cevap_sablonlari (
    gosterge_cevap_sablonu_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevap_sablonu_id INTEGER, -- recursive FK (dil desteği)
    gosterge_cevap_turu_id INTEGER,        -- FK: gosterge_cevap_turu tablosu
    gosterge_cevap_sablon_adi VARCHAR(64), 
    gosterge_cevap_adi VARCHAR(128),        
    gosterge_cevap_puani INTEGER,          
    dil_adi VARCHAR(64)
);


-- gosterge_cevaplari tablosu
-- Amaç: Modelde kullanılacak göstergelerin cevaplarını tanımlar.
-- Cevaplar kullanıcı türüne göre farklılık gösterebilir. Puanlama, gösterim sırası ve önem düzeyi içerir.

CREATE TABLE gosterge_cevaplari (
    gosterge_cevap_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevap_id INTEGER,       -- recursive FK (dil desteği)
    gosterge_id INTEGER,                 -- FK: gostergeler  tablosu
    gosterge_cevap_turu_id INTEGER,      -- FK: gosterge_cevap_turu tablosu
    kullanici_turu_id INTEGER,           -- FK: kullanici_turleri tablosu
    gosterge_cevap_onemi VARCHAR(32),    -- Minör, Majör, Zorunlu vb.
    gosterge_cevap_adi VARCHAR(128),      -- Seçenek metni
    gosterge_cevap_puani INTEGER,        -- Bu seçeneğe karşılık gelen puan
    gosterim_sirasi SMALLINT,             -- UI’da gösterim sırası ? eslesmeler tablosunda da var
    dil_adi VARCHAR(50),
    aktif SMALLINT                       -- 0: pasif, 1: aktif, 2: taslak
);


-- gosterge_cevabina_oneriler tablosu
-- Amaç: Belirli bir gösterge cevabı için kullanıcıya önerilen iyileştirme veya örnek uygulama cümlelerini tanımlar.
-- Her kullanıcı türü için farklı öneriler sunulabilir. Çok dilli destek içerir.

CREATE TABLE gosterge_cevabina_oneriler (
    gosterge_cevabina_oneriler_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_gosterge_cevabina_oneriler_id INTEGER,  -- recursive FK (dil desteği)
    gosterge_cevap_id INTEGER,                  -- FK: gosterge_cevaplari tablosu
    kullanici_turu_id INTEGER,                  -- FK: kullanici_turleri tablosu
    gosterge_cevabina_oneri TEXT,      
    dil_adi VARCHAR(64)                         
);


-- eslesmeler tablosu
-- Amaç: Model, boyut, kriter, gösterge ve ilgili cevapların sistemde nasıl eşleştiğini tanımlar.

CREATE TABLE eslesmeler (
    eslesme_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    model_id INTEGER,                           -- FK: modeller tablosu
    boyut_id INTEGER,                           -- FK: boyutlar tablosu
    kriter_id INTEGER,                          -- FK: kriterler tablosu
    seviye_id INTEGER,                          -- FK: seviyeler (karşılanma düzeyi için) tablosu
    gosterge_id INTEGER,                        -- FK: gostergeler tablosu
    gosterge_cevap_id INTEGER,                  -- FK: gosterge_cevaplari tablosu
    gosterge_cevabina_oneriler_id INTEGER,      -- FK: gosterge_cevabina_oneriler tablosu
    kullanici_turu_id INTEGER,                  -- FK: kullanici_turleri tablosu
    turu VARCHAR(64),                           -- Eşleşme türü → 'Model', 'Boyut', 'Kriter' vb.
    agirligi INTEGER,                           -- Ağırlık değeri (puanlama/öncelik için)
    gosterim_sirasi SMALLINT,                   -- Görsel sıralama için
    aciklama TEXT,
    aktif SMALLINT                              -- 0: pasif, 1: aktif, 2: taslak
);


-- karsilanma_duzeyi tablosu
-- Amaç: Eşleşmelerin hangi puan aralıklarında hangi seviyeyi veya metinsel karşılanma düzeyini temsil ettiğini tanımlar.

CREATE TABLE karsilanma_duzeyi (
    karsilanma_duzeyi_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ust_karsilanma_duzeyi_id INTEGER,            -- recursive FK (dil desteği)
    eslesme_id INTEGER,                          -- FK: eslesmeler tablosu
    seviye_id INTEGER,                           -- FK: seviyeler (opsiyonel: karşılık gelen seviye)
    turu VARCHAR(64),                            -- 'Model', 'Boyut', 'Kriter' vb.
    maksimum_puan INTEGER,
    minimum_puan INTEGER,
    karsilanma_duzeyi VARCHAR(64),              -- Örnek: 'Tamamen Karşılıyor'
    dil_adi VARCHAR(64)                         
);

------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------

-- kullanicilar tablosu
-- Amaç: Sisteme kayıt olan kullanıcıların temel bilgilerini, iletişim tercihlerini ve dil seçeneklerini saklamak

CREATE TABLE kullanicilar (
    kullanici_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ulke_id INTEGER ,                            -- FK: ulkeler tablosu
    kullanici_turu_id INTEGER,                   -- FK: kullanici_turleri tablosu
    kullanici_adi VARCHAR(64),
    kullanici_soyadi VARCHAR(64) ,
    sifre VARCHAR(64) ,                          -- NOT: hash'lenmiş halde saklanmalı!
    e_posta VARCHAR(64),
    e_posta_dogrulandi BOOLEAN,                  -- DEFAULT FALSE
    mobil_telefon VARCHAR(32),
    irtibat_tercihi VARCHAR(32),                 -- 'Telefon' | 'ePosta' (UI'de ikonla gösterilecek)
    unvan VARCHAR(64),                           -- Hekim, Hemşire, BT Uzmanı vb.
    arayuz_dil_adi VARCHAR(64),                  -- UI dili (örn. Türkçe, English)
    dil_adi VARCHAR(64)                          -- Anket/model dili
);


-- hastaneler tablosu
-- Amaç: Sistem kapsamındaki hastane kayıtlarını saklamak. 

CREATE TABLE hastaneler (
    hastane_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ulke_id INTEGER,                             -- FK: ulkeler
    sehir_id INTEGER,                            -- FK: sehirler
    hastane_turu_id INTEGER,                     -- FK: hastane_turleri
    hastane_adi VARCHAR(255),
    kurulus_yili SMALLINT,
    hastane_eczanesi BOOLEAN,                    -- Eczanesi var mı
    ayaktan_tedavi BOOLEAN,
    yatarak_tedavi BOOLEAN,
    yatak_sayisi SMALLINT,
    acil_servis BOOLEAN,
    acil_servis_seviyesi VARCHAR(32),            -- '1. Seviye', '2. Seviye', '3. Seviye'
    ybu BOOLEAN,                                 -- Yoğun Bakım Ünitesi var mı
    ybu_yatak_sayisi SMALLINT,
    ybu_seviyesi VARCHAR(32),                    -- '1. Seviye', '2. Seviye', '3. Seviye'
    aktif BOOLEAN 
);




-- hastane_model tablosu
-- Amaç: Hangi modelin hangi hastaneye, hangi dilde ve ne zaman atandığını takip etmek

CREATE TABLE hastane_model (
    hastane_model_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hastane_id INTEGER,                          -- FK: hastaneler
    model_id INTEGER,                            -- FK: modeller
    dil_adi VARCHAR(50),                         -- Bu modelin hangi dilde verileceği
    atanma_tarihi DATE,
    -- atamayi_yapan INTEGER,                       -- FK: kullanici_id (atanan kişi)
    son_gecerlilik_tarihi DATE,                  -- Anketin geçerlilik süresi
    aktif BOOLEAN DEFAULT TRUE
);


-- hastane_model_kullanicilar tablosu
-- Amaç: Bir hastane için atanmış modele hangi kullanıcıların veya delegelerin tanımlandığını belirtmek

CREATE TABLE hastane_model_kullanicilar (
    hastane_model_kullanici_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    hastane_model_id INTEGER,                    -- FK: hastane_model
    kullanici_id INTEGER,                        -- FK: kullanicilar (eğer kayıtlı kullanıcıysa)
    kullanici_turu_id INTEGER,                   -- FK: kullanici_turleri
    kayitli_kullanici BOOLEAN ,     			  -- Evetse sistemde kayıtlı kullanıcıdır
    delege_kullanici_adi VARCHAR(128),           -- Kayıtsızsa manuel girilen ad-soyad
    delege_kullanici_eposta VARCHAR(64),         -- Kayıtsızsa manuel girilen e-posta
    anket_url TEXT,                              -- Her kullanıcıya özel oluşturulan anket bağlantısı
    delagasyon_tarihi DATE                       -- Kullanıcıya atanma tarihi
);




