/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 17.0 		*/
/*  Created On : 27-May-2025 20:10:21 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* Drop Sequences for Autonumber Columns */

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

/* Drop Tables */

DROP TABLE IF EXISTS "Boyutlar" CASCADE
;

DROP TABLE IF EXISTS "Diller" CASCADE
;

DROP TABLE IF EXISTS "GostergeCervabinaOneriler" CASCADE
;

DROP TABLE IF EXISTS "GostergeCevapSablonu" CASCADE
;

DROP TABLE IF EXISTS "Gostergeler" CASCADE
;

DROP TABLE IF EXISTS "Hastaneler" CASCADE
;

DROP TABLE IF EXISTS "Hizmetler" CASCADE
;

DROP TABLE IF EXISTS "KarsilanmaDuzeyi" CASCADE
;

DROP TABLE IF EXISTS "Kriterler" CASCADE
;

DROP TABLE IF EXISTS "Kullanicilar" CASCADE
;

DROP TABLE IF EXISTS "KullanicilarRoller" CASCADE
;

DROP TABLE IF EXISTS "ModelHastaneTuru" CASCADE
;

DROP TABLE IF EXISTS "Modeller" CASCADE
;

DROP TABLE IF EXISTS "ModelUlke" CASCADE
;

DROP TABLE IF EXISTS "OdemeBilgileri" CASCADE
;

DROP TABLE IF EXISTS "Roller" CASCADE
;

DROP TABLE IF EXISTS "RolYetki" CASCADE
;

DROP TABLE IF EXISTS "GostergeCevaplari" CASCADE
;

DROP TABLE IF EXISTS "GostergeCevapTuru" CASCADE
;

DROP TABLE IF EXISTS "HastaneTurleri" CASCADE
;

DROP TABLE IF EXISTS "KullanıcıTurleri" CASCADE
;

DROP TABLE IF EXISTS "ModelTuru" CASCADE
;

DROP TABLE IF EXISTS "Sehirler" CASCADE
;

DROP TABLE IF EXISTS "Seviyeler" CASCADE
;

DROP TABLE IF EXISTS "Ulkeler" CASCADE
;

DROP TABLE IF EXISTS "UlkelerDiller" CASCADE
;

DROP TABLE IF EXISTS "Fatura" CASCADE
;

DROP TABLE IF EXISTS "HastaneDegerlendirme" CASCADE
;

DROP TABLE IF EXISTS "Odemeler" CASCADE
;

DROP TABLE IF EXISTS "Sepet" CASCADE
;

DROP TABLE IF EXISTS "Siparis" CASCADE
;

DROP TABLE IF EXISTS "SiparişSepeti" CASCADE
;

DROP TABLE IF EXISTS "AnketBoyut" CASCADE
;

DROP TABLE IF EXISTS "AnketKriter" CASCADE
;

DROP TABLE IF EXISTS "AnketModel" CASCADE
;

DROP TABLE IF EXISTS "AnketGostergeCevaplari" CASCADE
;

DROP TABLE IF EXISTS "AnketGostergeler" CASCADE
;

DROP TABLE IF EXISTS "AnketSeviyeKarsilanmaDuzeyi" CASCADE
;

DROP TABLE IF EXISTS "DilDestegi" CASCADE
;

DROP TABLE IF EXISTS "Eslesmeler" CASCADE
;

DROP TABLE IF EXISTS "HastaneModel" CASCADE
;

DROP TABLE IF EXISTS "HastaneModelKullanicilar" CASCADE
;

DROP TABLE IF EXISTS "ModelKullaniciKapsami" CASCADE
;

DROP TABLE IF EXISTS "ModelSeviye" CASCADE
;

/* Create Tables */

CREATE TABLE "Boyutlar"
(
	"Boyut_Id" serial NOT NULL,
	"UstBoyut_Id" integer NULL,
	"Boyut_Id_Hiyerarsi" integer NULL,
	"BoyutAdi" varchar(255) NOT NULL,
	"BoyutAllias" varchar(255) NOT NULL,
	"BoyutEtiketleri" text NULL,
	"Hiyerarsi" integer NULL,	-- Hiyerarsi niteliği, model, vb. konudaki seviyeden farklı. buradaki hiyerarsi, sadece boyutları hiyerarşik olarak göstermek istediğimizde JS, vb. TreeView komponentlerin kullandığı hiyerarşi seviyesini veritabanında tutmak içindir.
	"Aktif" boolean NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "Diller"
(
	"Dil_Id" serial NOT NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "GostergeCervabinaOneriler"
(
	"GostergeCevabinaOneriler_Id" serial NOT NULL,
	"UstGostergeCevabinaOneriler_Id" integer NULL,
	"GostergeCevap_Id" integer NULL,
	"KullaniciTuru_Id" integer NULL,
	"GostergeCevabinaOneri" text NOT NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "GostergeCevapSablonu"
(
	"GostergeCevapSablonu_Id" serial NOT NULL,
	"UstGostergeCevapSablonu_Id" integer NULL,
	"GostergeCevapTuru_Id" integer NULL,
	"GostergeCevapSablonAdi" varchar(50) NULL,	--  	1. Evet/Hayır 	2. K/KK/KM (Karşılıyor/KısmenKarılıyor/Karşılamıyor) 	3. Yüzde (Sayısal) 	4. Yüzde (Kademeli) 	5. Beşli Likert
	"GöstergeCevapAdi" varchar(50) NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"GostergeCevapPuani" integer NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "Gostergeler"
(
	"Gosterge_Id" serial NOT NULL,
	"UstGosterge_Id" integer NULL,
	"KriterCevapTuru_Id" integer NULL,
	"GostergeAdi" text NOT NULL,	-- GostergeAdı, göstergenin soru veya gereksinim cümlesidir. Örnek soru: "Hastalar ile hekimler arasında etkileşimi artırmak amacıyla mesajlaşma fonksiyonu bulunmaktadır  Lütfen yüzdeyi belirtiniz:" Bu tür bir kayıtta KriterCevapTuru alanında "Beşli Likert" seçili olabilir.  Örnek Soru: "HBYS'de saklanan ve hekimlerin eriştiği Laboratuvar, Radyoloji ve Kardiyoloji raporlarının yüzdesini yazınız"  Bu tür bir kayıtta KriterCevapTuru alanında "Yüzde" seçili olabilir.  0% 1-25 % 26-49 % 50-94 % 95-100 %
	"GostergeAllias" varchar(255) NOT NULL,
	"GostergeEtiketleri" text NULL,	-- Bir gösterge tanımlandığında onun hangi kriterler girebileceğine dair çağrılım yapmaıs için etiketler kullanacağız.
	"GostergeAciklamasi" text NULL,
	"GostergeOrnekUygulama" text NULL,
	"DilAdi" varchar(50) NULL,
	"Aktif" boolean NULL
)
;

CREATE TABLE "Hastaneler"
(
	"Hastane_Id" serial NOT NULL,
	"Ulke_Id" integer NULL,
	"Sehir_Id" integer NULL,
	"HastaneTuru_Id" integer NULL,
	"HastaneAdı" varchar(255) NULL,
	"KurulusYili" integer NULL,
	"HastaneEczanesi" boolean NULL,
	"AyaktanTedavi" boolean NULL,
	"YatarakTedavi" boolean NULL,
	"YatakSayisi" integer NULL,
	"AcilServis" boolean NULL,
	"AcilServisSeviyesi" varchar(50) NULL,	-- Burada ComboBox ile aşağıdaki seçenkler gösterilebilir: 1. Seviye 2. Seviye 3. Seviye
	"YBU" boolean NULL,
	"YBUYatakSayisi" varchar(50) NULL,
	"YBUSeviyesi" varchar(50) NULL,	-- Burada ComboBox ile aşağıdaki seçenkler gösterilebilir: 1. Seviye 2. Seviye 3. Seviye
	"Aktif" boolean NULL
)
;

CREATE TABLE "Hizmetler"
(
	"Hizmet_Id" serial NOT NULL,
	"Ulke_Id" integer NULL,
	"HastaneTuru_Id" integer NULL,
	"Model_Id" integer NULL,
	"HizmetAdi" varchar(255) NULL,
	"Fiyat" numeric(12,2) NULL,
	"ParaBirimi" char(5) NULL,
	"Aktif" boolean NULL
)
;

CREATE TABLE "KarsilanmaDuzeyi"
(
	"KarsilanmaDuzeyi_Id" serial NOT NULL,
	"UstKarsilanmaDuzeyi_Id" integer NULL,
	"Eslesme_Id" serial NULL,	-- Model, Boyut ve Kriterlerin karşılanma düzeylerinin sınırlarını (mak-min puanlarını) bu tabloda tutuyoruz. Bu nedenle bir Eslesmeler tablosundaki bir kaydın birden fazla karşılanma düzeyi olabilecektir. Bu detaylar da Karşılanma Düzeyi tablosunda tutulacaktır.
	"Seviye_Id" integer NULL,	-- Modelin ve boyutların karşılanma düzeyi kimi modellerde seviye ile ilişkilendiririlebilir. Bu durumda Her bir model ve model altındaki her bir boyut için seviyeler tablosu ile ilişkili şekilde min-maks değerler vs belirlenip karşılanma düzeyinin adı yazılmalı.
	"Turu" varchar(50) NULL,	-- 	- Model 	- Boyut 	- Kriter
	"MaksimumPuan" integer NULL,
	"MinimumPuan" integer NULL,
	"KarsilanmaDuzeyi" varchar(64) NULL,	-- Eğer model puan esaslı ise göstergelerden itibaren hesaplanan puanların karşılık geldiği aralık (maksimum-minimum) burada tanımlanır ve bu puan aralığına denk gelen Karşılanma düzryi ifadesi bu alana (KarsilanmaDuzeyi) yazılır. Örneğin SKS'de Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi ifadeler bu alan yazılır. Seviye esaslı modellerde de benzer şekilde puan aralıkları oluşturulur ve her aralıa denk gelen ifadeler uygun şekilde yazılır.  Bu formda farklı dilllerde giriş yapacğaımız zaman, minimum-maksimum puanlar vs yeniden girilmez, sadece KarsilanmaDuzeyi alanı farklı dilde yazılır.
	"DilAdi" varchar(50) NULL	-- Burada maksimum-minimum puanlar dil değiştiğinde sabit kalıyor. BU nedenle yeni dil eklentisi tanımladığımızda sadece Karşılanma Düzeyi (Varchar) kısmında değişklik yapılacak.
)
;

CREATE TABLE "Kriterler"
(
	"Kriter_Id" serial NOT NULL,
	"UstKriter_Id" integer NULL,
	"KriterAdi" text NULL,
	"KriterAlias" varchar(50) NULL,
	"KriterEtiketleri" text NULL,
	"DilAdi" varchar(50) NULL,
	"Aktif" boolean NULL
)
;

CREATE TABLE "Kullanicilar"
(
	"Kullanici_Id" serial NOT NULL,
	"Ulke_Id" integer NOT NULL,	-- Kullanıcı ilk kayıt olduğunda ülkesini seçmeli. İlk giriş yaptığında ise, bu ülkeye tanımlanmış olan modelleri listeleyip inceleyip onlardan birini sepete ekleyip ödemesini yapabilmeli. Daha sonra da ilgili modele kullanıcı delege edebilmeli.
	"KullaniciTuru_Id" integer NULL,
	"KullaniciAdi" varchar(50) NULL,
	"KullaniciSoyadi" varchar(50) NOT NULL,
	"Sifre" varchar(50) NOT NULL,
	"ePosta" varchar(50) NULL,
	"ePostaDogrulandi" boolean NULL,	-- Kayıt süreci içerisinde kullanıcı e-postasının doğrulanması gerekiyor. Kayıt ilk açıldığında bu alan 0 set edilir, doğrulama linki çalıştığında bu alan 1 yapılır. 
	"MobilTelefon" varchar(50) NULL,
	"IrtibatTercihi" varchar(50) NULL,	-- Seçenekler (ikon şeklinde):  	- Telefon 	- ePosta
	"Unvan" varchar(50) NULL,
	"ArayuzDilAdi" varchar(50) NULL,	-- Kullanıcının profilinde seçmiş olduğu "Arayüz Dili" seçeneği buraya kaydedilmeli. Bu seçenek, ekran görünümünü bağlamaktadır.
	"DilAdi" varchar(50) NULL	-- Kullanıcının profilinde seçmiş olduğu "Model/Anket Dili" seçeneği buraya kaydedilmeli. Bu seçenek, anketlerin soruları, vb. içerikle ilgilidir.
)
;

CREATE TABLE "KullanicilarRoller"
(
	"KullaniciRol_Id" serial NOT NULL,
	"Kullanici_Id" integer NULL,
	"Rol_Id" integer NULL
)
;

CREATE TABLE "ModelHastaneTuru"
(
	"ModelHastaneTuru_Id" serial NOT NULL,
	"Model_Id" integer NULL,
	"HastaneTuru_Id" integer NULL
)
;

CREATE TABLE "Modeller"
(
	"Model_Id" serial NOT NULL,
	"UstModel_Id" integer NULL,
	"ModelTuru_Id" integer NULL,
	"ModelResmiAdi" varchar(128) NOT NULL,
	"ModelAliasAdi" varchar(128) NOT NULL,
	"KullaniciKapsami" varchar(50) NULL,	-- 	- Hastane adına tek anket 	- Farklı kullanıcı türlerine göre özelleşmiş anket  Eğer ikincisi seçilirse, bu model ile Kullanıcı türü tablosu arasındaki tablo (ModelKullaniciTuru) ilgili kullanıcı türleri seçilerek doldurulur.  Bu sayede, ilgili anket herhangi bir hastane için atanırken (oluşturulurken) her bir kullanıcı türü içn tanımlanan anket boyut, kriter ve göstergeleri ayrı ayrı oluşturulur.
	"Aktif" boolean NOT NULL,
	"DevreyeAlmaTahiri" date NULL,
	"DevredenKaldirilmaTarihi" date NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "ModelUlke"
(
	"ModelUlke_Id" serial NOT NULL,
	"Ulke_Id" integer NULL,
	"Model_Id" integer NULL,
	"DevreyeAlmaTarihi" date NULL,	-- Modelin ilgili ülkedeki devreye alma tarihi
	"DilAdi" varchar(50) NULL,
	"Aktif" boolean NULL	-- Bir modelin, bir ülkede geçerli olması için, ilgili ülkeye atanması gerekir. Kayıt ilk defa açıldığında Aktif=0 set edilir. Ülke atama işlemleri bu tabloda tutulur. Ama işlemi geçerli oldıuğunda Aktif=1 set edilir.
)
;

CREATE TABLE "OdemeBilgileri"
(
	"OdemeBilgisi_Id" serial NOT NULL,
	"Kullanici_Id" integer NULL,
	"OdemeTuru" varchar(50) NULL,
	"KartNumarasi" varchar(20) NULL,	-- Burada bir POS entegrasyonu olmalı ve kart bilgileri yerelde tutulmamalı. Şimdilik sadece bu alanların arayüzde olacağını belirtmek için not ediyoruz.
	"SonKullanmaTarihi" date NULL,	-- Burada bir POS entegrasyonu olmalı ve kart bilgileri yetrelde tutulmamalı. Şimdilik sadece bu alanların arayzde olacağını belirtmek için not ediyoruz.
	"KartUstundekiIsim" varchar(128) NULL
)
;

CREATE TABLE "Roller"
(
	"Rol_Id" serial NOT NULL,
	"RolAdi" varchar(50) NULL,	-- 	- Model Yöneticisi 	- Anket Yöneticisi 	- Muhasebeci 	- Model Kalite Uzmanı 	- Hastane Kullanıcısı
	"RolKodu" varchar(50) NULL
)
;

CREATE TABLE "RolYetki"
(
	"RolYetki_Id" serial NOT NULL,
	"Rol_Id" integer NULL,
	"YetkiKodu" varchar(50) NULL
)
;

CREATE TABLE "GostergeCevaplari"
(
	"GostergeCevap_Id" serial NOT NULL,
	"UstGostergeCevap_Id" integer NULL,
	"Gosterge_Id" integer NULL,
	"ModelBoyutKriterGosterge_Id" integer NULL,
	"GostergeCevapTuru_Id" integer NULL,
	"KullaniciTuru_Id" integer NULL,
	"GostergeCevapOnemi" varchar(50) NULL,	-- 	- Minör 	- Majör 	- Zorunlu
	"GostergeCevapAdi" varchar(50) NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"GostergeCevapPuani" integer NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"GosterimSirasi" integer NULL,
	"DilAdi" varchar(50) NULL,	-- İlk kayıt açıldığında defauyls dil Türkçe olacak. Ancak aynı seçenek için başka dilde kayıt açılması istenirse yeni kayıt alılırken, UstGosterge_Id olarak ilk kayı seçip dil seçeneği ve GostergeCevapAdi alanları doldurulark kayıt açılacak.
	"Aktif" boolean NULL
)
;

CREATE TABLE "GostergeCevapTuru"
(
	"GostergeCevapTuru_Id" serial NOT NULL,
	"GostergeCevapTuru" varchar(50) NOT NULL	--  	1. Evet/Hayır 	2. K/KK/KM (Karşılıyor/KısmenKarılıyor/Karşılamıyor) 	3. Yüzde (Sayısal) 	4. Yüzde (Kademeli) 	5. Beşli Likert
)
;

CREATE TABLE "HastaneTurleri"
(
	"HastaneTuru_Id" serial NOT NULL,
	"UstHastaneTuru_Id" integer NULL,
	"HastaneTur_Adi" varchar(50) NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "KullanıcıTurleri"
(
	"KullaniciTuru_Id" serial NOT NULL,
	"UstKullaniciTuru_Id" integer NULL,
	"KullaniciTuruAdi" varchar(50) NULL,
	"Aciklama" text NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "ModelTuru"
(
	"ModelTuru_Id" serial NOT NULL,
	"ModelTuruAdi" varchar(50) NULL	-- 	- Puan esaslı 	- Seviye esaslı
)
;

CREATE TABLE "Sehirler"
(
	"Sehir_Id" serial NOT NULL,
	"Ulke_Id" integer NULL,
	"SehirAdi" varchar(50) NULL,
	"BolgeAdi" varchar(50) NULL,
	"NUTSAdi" varchar(50) NULL
)
;

CREATE TABLE "Seviyeler"
(
	"Seviye_Id" serial NOT NULL,
	"UstSeviyel_Id" integer NULL,
	"SeviyeAdi" varchar(50) NULL,
	"DilAdi" varchar(50) NULL
)
;

CREATE TABLE "Ulkeler"
(
	"Ulke_Id" serial NOT NULL,
	"UlkeAdi" varchar(128) NULL
)
;

CREATE TABLE "UlkelerDiller"
(
	"UlkeDil_Id" serial NOT NULL,
	"Ulke_Id" integer NULL,
	"Dil_Id" integer NULL,
	"Varsayilan" boolean NULL	-- Her ülkenin sadece bir tane varsayılan dili olmalı. Ama ülke için birden fazla dil tanımlanabilir. Bu sayede, örneğin Türkiye'deki bir hastane, tercih ederse anket formunu açtığında, birden fazla dil seçeneği ile karşısına gelen ankette, aynı sorunun diğer uygun dildeki versiyonunu da görebilir.
)
;

CREATE TABLE "Fatura"
(
	"Fatura_Id" serial NOT NULL,
	"Siparis_Id" integer NULL,
	"Hastane_Id" integer NULL,
	"FaturaNo" varchar(50) NULL,
	"FaturaTarihi" date NULL,
	"Unvan" text NULL,
	"VergiNo" varchar(16) NULL,
	"VergiDaire" varchar(64) NULL,
	"KurumAdres" text NULL,
	"FaturayiAlanYetkili" varchar(255) NULL,
	"FaturayiAlaninUnvani" varchar(128) NULL,
	"FaturayiAlaninEPostasi" varchar(128) NULL,
	"FaturayiAlaninTelefonu" varchar(50) NULL,
	"FaturaninGonderildigiTarih" date NULL,
	"ParaBirimi" char(5) NULL,
	"AraToplam" numeric(12,2) NULL,
	"VergiOran" numeric(4,2) NULL,
	"VergiTutar" numeric(12,2) NULL,
	"GenelToplam" numeric(12,2) NULL,
	"PDF_Linki" text NULL,	-- Link veya dosya dizini
	"KesimDurumu" varchar(50) NULL,
	"FaturaAGonderimYolu" varchar(50) NULL	-- 	- Elektronik Fatura 	- e-Posta 	- Posta 	- Diğer
)
;

CREATE TABLE "HastaneDegerlendirme"
(
	"HastaneDegerlendirme_Id" number NOT NULL,
	"ZiyaretTarihi" date NULL,
	"Sure" integer NULL,
	"Hastane_Id" serial NULL,
	"Model_Id" serial NULL
)
;

CREATE TABLE "Odemeler"
(
	"Odeme_Id" serial NOT NULL,
	"Fatura_Id" integer NULL,
	"OdemeTarihi" date NULL,
	"OdenenTutar" numeric(12,2) NULL,
	"ParaBirimi" varchar(5) NULL,
	"OdemeKanali" varchar(50) NULL,	-- 	- EFT 	- Havale 	- Swift 	- Nakit
	"Aciklama" varchar(50) NULL,
	"Kaydeden" integer NULL,	-- Kullanicilar tablosundaki "Kullanici_Id"
	"KayitTarihi" date NULL,
	"Duzenleyen" integer NULL,
	"DuzenlemeTarihi" date NULL
)
;

CREATE TABLE "Sepet"
(
	"Sepet_Id" serial NOT NULL,
	"Kullanici_Id" integer NULL,
	"Hizmet_Id" integer NULL,
	"Hastane_Id" integer NULL,
	"Adet" integer NULL,
	"SepeteEklenmeTarihi" date NULL,
	"ParaBirimi" char(5) NULL,
	"BirimUcret" numeric(12,2) NULL,
	"ToplamUcret" numeric(12,2) NULL
)
;

CREATE TABLE "Siparis"
(
	"Siparis_Id" serial NOT NULL,
	"SiparişNo" varchar(50) NULL,	-- Sipariş alındığında üretilen ve faturada da yer alması beklenen alfanümerik değer
	"OdemeKanali" varchar(50) NULL,	-- 	- EFT 	- Havale 	- Swift 	- Nakit
	"OdemeDurumu" varchar(50) NULL,	-- 	- Ödenmedi 	- Kısmen ödendi 	- Ödendi
	"OdenenTutar" numeric NULL,
	"ToplamTutar" numeric(12,2) NULL,
	"SiparisTarihi" date NULL,
	"SiparisDurumu" varchar(50) NULL	-- 	- İptal edildi 	- Sipariş edildi (İrtibat Bekleniyor) 	- İrtibat kuruldu 	- Ödeme bekleniyor 	- Ödeme Yapıldı
)
;

CREATE TABLE "SiparişSepeti"
(
	"SiparisSepeti_Id" serial NOT NULL,
	"Siparis_Id" integer NULL,
	"Sepet_Id" integer NULL,
	"SiparisSepetineEklenmeTarihi" date NULL,
	"Adet" integer NULL,
	"ParaBirimi" varchar(50) NULL,
	"BirimUcret" numeric(12,2) NULL,
	"ToplamUcret" numeric(12,2) NULL
)
;

CREATE TABLE "AnketBoyut"
(
	"AnketBoyut_Id" serial NOT NULL,
	"AnketModel_Id" integer NULL,
	"Boyut_Id" integer NULL,
	"HastaneModelKullanici_Id" integer NULL,
	"BoyutAdi" varchar(256) NULL,
	"Agirligi" integer NULL,	-- Eslesmeler tablosunda ilgili Boyut tanımlanırken, altında yer aldığı Model içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.
	"GosterimSirasi" integer NULL,
	"DilAdi" varchar(50) NULL,
	"OlusturmaTarihi" date NULL
)
;

CREATE TABLE "AnketKriter"
(
	"AnketKriter_Id" serial NOT NULL,
	"AnketBoyut_Id" integer NULL,
	"Kriter_Id" integer NULL,
	"KriterAdi" text NULL,
	"Agirligi" integer NULL,	-- Eslesmeler tablosunda ilgili Kriter tanımlanırken, altında yer aldığı boyut içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.
	"Seviye" integer NULL,
	"GosterimSirasi" integer NULL,
	"DilAdi" varchar(50) NULL,
	"OlusturmaTarihi" date NULL
)
;

CREATE TABLE "AnketModel"
(
	"AnketModel_Id" serial NOT NULL,
	"HastaneModel_Id" integer NULL,
	"AnketSeriNo" varchar(50) NULL,	-- Anket oluşturulduğunda, anket için oluşturulan tekil numara. Ankete delege olan kişiler
	"Hastane_Id" integer NULL,
	"KullaniciTuru" integer NULL,
	"Model_Id" integer NULL,
	"ModelAdi" varchar(256) NULL,
	"DilAdi" varchar(50) NULL,
	"OlusturmaTarihi" date NULL
)
;

CREATE TABLE "AnketGostergeCevaplari"
(
	"AnketGostergeCevap_Id" serial NOT NULL,
	"AnketGosterge_Id" serial NULL,
	"AnketGostergeCevapAdi" varchar(50) NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"AnketGostergeCevapPuani" integer NULL,	--  	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir. 	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.   Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.
	"AnketGostergeCevapOnemi" varchar(50) NULL,	-- 	- Minör 	- Majör 	- Zorunlu
	"Secildi" boolean NULL,	-- Başlangıçta bu alan boş gelir. Kullanıcı her bir göstergenin cevaplarından sadece birini seçebilir. Seçilenin puanı bu göstergenin ait olduğu kriterin puanının hesaplamasına dahil edilir.
	"GosterimSirasi" integer NULL,
	"OlusturmaTarihi" date NULL
)
;

CREATE TABLE "AnketGostergeler"
(
	"AnketGosterge_Id" serial NOT NULL,
	"AnketKriter_Id" serial NULL,
	"Gosterge_Id" integer NULL,
	"GostergeAdi" text NULL,
	"Agirligi" integer NULL,	-- Eslesmeler tablosunda ilgili Gösterge tanımlanırken, altında yer aldığı Kriter içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.
	"GosterimSirasi" integer NULL,
	"DilAdi" varchar(50) NULL,
	"OLusturmaTarihi" date NULL
)
;

CREATE TABLE "AnketSeviyeKarsilanmaDuzeyi"
(
	"AnketKarsilanmaDuzeyi_Id" serial NOT NULL,
	"ModelSeviye_Id" integer NULL,
	"AnketBoyut_Id" integer NULL,
	"AnketKriter_Id" integer NULL,
	"AnketModel_Id" integer NULL,
	"Turu" varchar(50) NULL,	-- 	- Model 	- Boyut 	- Kriter
	"KarsilanmaDuzeyi" varchar(64) NULL,	-- KarsilanmaDuzeyi tablosundaki min-maks kriterlere göre göstergelerin sonuçlarında yola çıkarak kriterrin, kriterlerin sonuçlarından yola çıkarak boyutların, boyutların sonuçlarından yola çıkarak da modelin karşılanma düzeyi hesaplanır.  Modelin türüne göre ve kriter için ltanımlanan karşılanma düzeyine göre burada bir metin elde edilir. Ama bu sonuç GAP raporu üretileceği zaman oluşturulur. GAP raporunda sadece model, boyut ve kriter karşılanma düzeyi gösterilir. Göstergeler rapora yansıtılmaz.
	"DilAdi" varchar(50) NULL,
	"OlusturmaTarihi" varchar(50) NULL
)
;

CREATE TABLE "DilDestegi"
(
	"DilDestegi_Id" varchar(50) NULL,
	"TabloId" varchar(50) NULL,
	"NitelikId" varchar(50) NULL,
	"DilAdi" varchar(50) NULL,
	"Metin" varchar(50) NULL
)
;

CREATE TABLE "Eslesmeler"
(
	"Eslesme_Id" serial NOT NULL,
	"Model_Id" serial NULL,
	"Boyut_Id" serial NULL,
	"Kriter_Id" serial NULL,
	"Seviye_Id" serial NULL,	-- Eşleşmeler yapılırken, özellikle Kriterler için, karşı geldikleri seviye yazılır. Ancak ilgili kriterin (veya boyutun) karşılanma düzeyi aşağıdaki tabloda mak-min puan aralıklarıyla bilrikte ayrıca kayda alınmalıdır.
	"Gosterge_Id" serial NULL,
	"GostergeCevap_Id" serial NULL,
	"GostergeCevabinaOneriler_Id" serial NULL,
	"KullaniciTuru_Id" serial NULL,
	"Turu" varchar(50) NULL,	-- 	- Model 	- Boyut 	- Kriter 	- Gösterge 	- Gösterge Cevap 	- Gösterge Cevap Öneri
	"Agirligi" integer NULL,
	"GosterimSirasi" integer NULL,
	"Aciklama" text NULL,
	"Aktif" boolean NULL
)
;

CREATE TABLE "HastaneModel"
(
	"HastaneModel_Id" serial NOT NULL,
	"Hastane_Id" integer NULL,
	"Model_Id" integer NULL,
	"DilAdi" varchar(50) NULL,	-- Bir hastaneye aynı anket sadece bir dilde atanır. Atandığı dil de buraya yazılır. Bu sayede, anket fiziksel olarak oluşturulurken de ilgili taablolar aynı dile uygun olan ifadelerle doldurulur
	"AtanmaTarihi" date NULL,
	"AtamayiYapan" integer NULL,
	"SonGecerlilikTarihi" date NULL,	-- Anket tanımlanırken, belirli bir süreliğine açılıyor olabilir. Bu durumda bu tarih seçilir. İlgili anket hastane tarafından açılmak istendiğinde bu tarihin geçip geçmediği kontrol edilir.
	"Aktif" boolean NULL
)
;

CREATE TABLE "HastaneModelKullanicilar"
(
	"HastaneModelKullanici_Id" serial NOT NULL,
	"HastaneModel_Id" integer NULL,
	"Kullanici_Id" integer NULL,
	"KullaniciTuru_Id" integer NULL,	-- Manuel eklenen ve delege edilen kullanıcılar için de Kullanıcı Türü seçilmeli.
	"KayitliKullanici" boolean NULL,	-- Hastane için tanımlanan anketletin daha önce mutlaka kayıtlı bir kullanıcı tarafından doldurulması ZARURİ DEĞİL. Dolayısıyla, sadece e-posta ve isim girerek de ankete DELEGE ATANABİLİR. Eğer kayıtlı kullanıcı ise, listeden seçip kullanıcının adı-soyadı sisteme otomatik getirilir.
	"DelegeKullaniciAdi" varchar(128) NULL,
	"DelegeKullaniciEPosta" varchar(64) NULL,
	"AnketURL" text NULL,
	"DelasyonTarihi" date NULL
)
;

CREATE TABLE "ModelKullaniciKapsami"
(
	"ModelKullaniciKapsami_Id" serial NOT NULL,
	"KullaniciTuru_Id" integer NULL,
	"Model_Id" integer NULL
)
;

CREATE TABLE "ModelSeviye"
(
	"ModelSeviye_Id" serial NOT NULL,
	"Model_Id" integer NULL,
	"Seviye_Id" integer NULL
)
;

/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE "Boyutlar" ADD CONSTRAINT "PK_Boyut_Id"
	PRIMARY KEY ("Boyut_Id")
;

ALTER TABLE "Diller" ADD CONSTRAINT "PK_Dil_Id"
	PRIMARY KEY ("Dil_Id")
;

ALTER TABLE "GostergeCervabinaOneriler" ADD CONSTRAINT "PK_GostergeCervabinaOneri_Id"
	PRIMARY KEY ("GostergeCevabinaOneriler_Id")
;

CREATE INDEX "IXFK_GostergeCevap_Id" ON "GostergeCervabinaOneriler" ("GostergeCevap_Id" ASC)
;

CREATE INDEX "IXFK_KullanıcıTuru_Id" ON "GostergeCervabinaOneriler" ("KullaniciTuru_Id" ASC)
;

CREATE INDEX "IXFK_UstGostergeCervabinaOneriler_Id" ON "GostergeCervabinaOneriler" ("UstGostergeCevabinaOneriler_Id" ASC)
;

ALTER TABLE "GostergeCevapSablonu" ADD CONSTRAINT "PK_GostergeCevapSablonu"
	PRIMARY KEY ("GostergeCevapSablonu_Id")
;

CREATE INDEX "IXFK_GostergeCevapSablonu_GostergeCevapTuru" ON "GostergeCevapSablonu" ("GostergeCevapTuru_Id" ASC)
;

CREATE INDEX "IXFK_GostergeCevapSablonu_Id" ON "GostergeCevapSablonu" ("UstGostergeCevapSablonu_Id" ASC)
;

ALTER TABLE "Gostergeler" ADD CONSTRAINT "PK_Gosterge_Id"
	PRIMARY KEY ("Gosterge_Id")
;

ALTER TABLE "Hastaneler" ADD CONSTRAINT "PK_Hastane_Id"
	PRIMARY KEY ("Hastane_Id")
;

ALTER TABLE "Hizmetler" ADD CONSTRAINT "PK_Hizmet_Id"
	PRIMARY KEY ("Hizmet_Id")
;

CREATE INDEX "IXFK_HastaneTuru_Id" ON "Hizmetler" ("HastaneTuru_Id" ASC)
;

CREATE INDEX "IXFK_Model_Id" ON "Hizmetler" ("Model_Id" ASC)
;

CREATE INDEX "IXFK_Ulke_Id" ON "Hizmetler" ("Ulke_Id" ASC)
;

ALTER TABLE "KarsilanmaDuzeyi" ADD CONSTRAINT "PK_KarsilanmaDuzeyi_Id"
	PRIMARY KEY ("KarsilanmaDuzeyi_Id")
;

CREATE INDEX "IXFK_Boyut_Id" ON "KarsilanmaDuzeyi" ()
;

CREATE INDEX "IXFK_KarsilanmaDuzeyi_Eslesmeler" ON "KarsilanmaDuzeyi" ("Eslesme_Id" ASC)
;

CREATE INDEX "IXFK_KarsilanmaDuzeyi_Seviyeler" ON "KarsilanmaDuzeyi" ("Seviye_Id" ASC)
;

CREATE INDEX "IXFK_Kriter_Id" ON "KarsilanmaDuzeyi" ()
;

CREATE INDEX "IXFK_KullanıcıTuru_Id" ON "KarsilanmaDuzeyi" ()
;

CREATE INDEX "IXFK_Model_Id" ON "KarsilanmaDuzeyi" ()
;

CREATE INDEX "IXFK_Seviye_Id" ON "KarsilanmaDuzeyi" ("Seviye_Id" ASC)
;

CREATE INDEX "IXFK_UstKarsilanmaDuzeyi_Id" ON "KarsilanmaDuzeyi" ("UstKarsilanmaDuzeyi_Id" ASC)
;

ALTER TABLE "Kriterler" ADD CONSTRAINT "PK_Kriter_Id"
	PRIMARY KEY ("Kriter_Id")
;

CREATE INDEX "IXFK_Kriterler_Kriterler" ON "Kriterler" ("UstKriter_Id" ASC)
;

CREATE INDEX "IXFK_Kriterler_ModelSeviye" ON "Kriterler" ()
;

ALTER TABLE "Kullanicilar" ADD CONSTRAINT "PK_Kullanici_Id"
	PRIMARY KEY ("Kullanici_Id")
;

CREATE INDEX "IXFK_KullaniciTuru_Id" ON "Kullanicilar" ("KullaniciTuru_Id" ASC)
;

CREATE INDEX "IXFK_Ulke_Id" ON "Kullanicilar" ("Ulke_Id" ASC)
;

ALTER TABLE "KullanicilarRoller" ADD CONSTRAINT "PK_KullanicilarRoller"
	PRIMARY KEY ("KullaniciRol_Id")
;

CREATE INDEX "IXFK_KullanicilarRoller_Kullanicilar" ON "KullanicilarRoller" ("Kullanici_Id" ASC)
;

CREATE INDEX "IXFK_KullanicilarRoller_Roller" ON "KullanicilarRoller" ("Rol_Id" ASC)
;

ALTER TABLE "ModelHastaneTuru" ADD CONSTRAINT "PK_ModelHastaneTuru_Id"
	PRIMARY KEY ("ModelHastaneTuru_Id")
;

CREATE INDEX "IXFK_HastaneTuru_Id" ON "ModelHastaneTuru" ("HastaneTuru_Id" ASC)
;

CREATE INDEX "IXFK_Model_Id" ON "ModelHastaneTuru" ("Model_Id" ASC)
;

ALTER TABLE "Modeller" ADD CONSTRAINT "PK_Model_Id"
	PRIMARY KEY ("Model_Id")
;

CREATE INDEX "IXFK_KullaniciTuru_Id" ON "Modeller" ()
;

CREATE INDEX "IXFK_Model_Id" ON "Modeller" ("Model_Id" ASC)
;

CREATE INDEX "IXFK_ModelTuru_Id" ON "Modeller" ("ModelTuru_Id" ASC)
;

CREATE INDEX "IXFK_UstModel_Id" ON "Modeller" ("UstModel_Id" ASC)
;

ALTER TABLE "ModelUlke" ADD CONSTRAINT "PK_ModelUlke_Id"
	PRIMARY KEY ("ModelUlke_Id")
;

CREATE INDEX "IXFK_Model_Id" ON "ModelUlke" ("Model_Id" ASC)
;

CREATE INDEX "IXFK_Ulke_Id" ON "ModelUlke" ("Ulke_Id" ASC)
;

ALTER TABLE "OdemeBilgileri" ADD CONSTRAINT "PK_OdemeBilgisi_Id"
	PRIMARY KEY ("OdemeBilgisi_Id")
;

CREATE INDEX "IXFK_Kullanici_Id" ON "OdemeBilgileri" ("Kullanici_Id" ASC)
;

ALTER TABLE "Roller" ADD CONSTRAINT "PK_Rol_Id"
	PRIMARY KEY ("Rol_Id")
;

ALTER TABLE "RolYetki" ADD CONSTRAINT "PK_RolYetki"
	PRIMARY KEY ("RolYetki_Id")
;

CREATE INDEX "IXFK_RolYetki_Roller" ON "RolYetki" ("Rol_Id" ASC)
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "PK_GostergeCevap_Id"
	PRIMARY KEY ("GostergeCevap_Id")
;

CREATE INDEX "IXFK_Gosterge_Id" ON "GostergeCevaplari" ("Gosterge_Id" ASC)
;

CREATE INDEX "IXFK_KullaniciTuru_Id" ON "GostergeCevaplari" ("KullaniciTuru_Id" ASC)
;

CREATE INDEX "IXFK_ModelBoyutKriterGosterge_Id" ON "GostergeCevaplari" ("ModelBoyutKriterGosterge_Id" ASC)
;

CREATE INDEX "IXFK_Ust_GostergeCevap_Id" ON "GostergeCevaplari" ("UstGostergeCevap_Id" ASC)
;

ALTER TABLE "GostergeCevapTuru" ADD CONSTRAINT "PK_GostergeCevapTuru_Id"
	PRIMARY KEY ("GostergeCevapTuru_Id")
;

ALTER TABLE "HastaneTurleri" ADD CONSTRAINT "PK_HastaneTuru_Id"
	PRIMARY KEY ("HastaneTuru_Id")
;

CREATE INDEX "IXFK_UstHastaneTuru_Id" ON "HastaneTurleri" ("UstHastaneTuru_Id" ASC)
;

ALTER TABLE "KullanıcıTurleri" ADD CONSTRAINT "PK_KullanıcıTuru_Id"
	PRIMARY KEY ("KullaniciTuru_Id")
;

CREATE INDEX "IXFK_Ust_KullanıcıTuru_Id" ON "KullanıcıTurleri" ("UstKullaniciTuru_Id" ASC)
;

ALTER TABLE "ModelTuru" ADD CONSTRAINT "PK_ModelTuru_Id"
	PRIMARY KEY ("ModelTuru_Id")
;

ALTER TABLE "Sehirler" ADD CONSTRAINT "PK_Sehir_Id"
	PRIMARY KEY ("Sehir_Id")
;

CREATE INDEX "IXFK_Ulke_Id" ON "Sehirler" ("Ulke_Id" ASC)
;

ALTER TABLE "Seviyeler" ADD CONSTRAINT "PK_Seviye_Id"
	PRIMARY KEY ("Seviye_Id")
;

CREATE INDEX "IXFK_Seviye_Id" ON "Seviyeler" ("UstSeviyel_Id" ASC)
;

ALTER TABLE "Ulkeler" ADD CONSTRAINT "PK_Ulke_Id"
	PRIMARY KEY ("Ulke_Id")
;

ALTER TABLE "UlkelerDiller" ADD CONSTRAINT "PK_UlkeDil_Id"
	PRIMARY KEY ("UlkeDil_Id")
;

CREATE INDEX "IXFK_Dil_Id" ON "UlkelerDiller" ("Dil_Id" ASC)
;

CREATE INDEX "IXFK_Ulke_Id" ON "UlkelerDiller" ("Ulke_Id" ASC)
;

ALTER TABLE "Fatura" ADD CONSTRAINT "PK_Fatura_Id"
	PRIMARY KEY ("Fatura_Id")
;

CREATE INDEX "IXFK_Fatura_Hastane_Id" ON "Fatura" ("Hastane_Id" ASC)
;

CREATE INDEX "IXFK_Fatura_Siparis_Id" ON "Fatura" ("Siparis_Id" ASC)
;

ALTER TABLE "HastaneDegerlendirme" ADD CONSTRAINT "PK_HastaneDegerlendirme"
	PRIMARY KEY ("HastaneDegerlendirme_Id")
;

CREATE INDEX "IXFK_HastaneDegerlendirme_Hastaneler" ON "HastaneDegerlendirme" ("Hastane_Id" ASC)
;

CREATE INDEX "IXFK_HastaneDegerlendirme_Hastaneler_02" ON "HastaneDegerlendirme" ("Hastane_Id" ASC)
;

CREATE INDEX "IXFK_HastaneDegerlendirme_Modeller" ON "HastaneDegerlendirme" ("Model_Id" ASC)
;

ALTER TABLE "Odemeler" ADD CONSTRAINT "PK_Odeme_Id"
	PRIMARY KEY ("Odeme_Id")
;

CREATE INDEX "IXFK_Odemeler_Fatura_Id" ON "Odemeler" ("Fatura_Id" ASC)
;

ALTER TABLE "Sepet" ADD CONSTRAINT "PK_Sepet_Id"
	PRIMARY KEY ("Sepet_Id")
;

CREATE INDEX "IXFK_Hastane_Id" ON "Sepet" ("Hastane_Id" ASC)
;

CREATE INDEX "IXFK_Hizmet_Id" ON "Sepet" ("Hizmet_Id" ASC)
;

CREATE INDEX "IXFK_Kullanici_Id" ON "Sepet" ("Kullanici_Id" ASC)
;

ALTER TABLE "Siparis" ADD CONSTRAINT "PK_Sipariş_Id"
	PRIMARY KEY ("Siparis_Id")
;

ALTER TABLE "SiparişSepeti" ADD CONSTRAINT "PK_SiparişSepeti_Id"
	PRIMARY KEY ("SiparisSepeti_Id")
;

CREATE INDEX "IXFK_Sepet_Id" ON "SiparişSepeti" ("Sepet_Id" ASC)
;

CREATE INDEX "IXFK_Siparis_Id" ON "SiparişSepeti" ("Siparis_Id" ASC)
;

ALTER TABLE "AnketBoyut" ADD CONSTRAINT "PK_AnketBoyut_Id"
	PRIMARY KEY ("AnketBoyut_Id")
;

CREATE INDEX "IXFK_AnketBoyut_AnketModel" ON "AnketBoyut" ("AnketModel_Id" ASC)
;

ALTER TABLE "AnketKriter" ADD CONSTRAINT "PK_AnketKriter_Id"
	PRIMARY KEY ("AnketKriter_Id")
;

CREATE INDEX "IXFK_AnketKriter_AnketBoyut_Id" ON "AnketKriter" ("AnketBoyut_Id" ASC)
;

ALTER TABLE "AnketModel" ADD CONSTRAINT "PK_AnketModel_Id"
	PRIMARY KEY ("AnketModel_Id")
;

CREATE INDEX "IXFK_HastaneModel_Id" ON "AnketModel" ("HastaneModel_Id" ASC)
;

ALTER TABLE "AnketGostergeCevaplari" ADD CONSTRAINT "PK_AnketGostergeCevaplari"
	PRIMARY KEY ("AnketGostergeCevap_Id")
;

CREATE INDEX "IXFK_AnketGostergeCevaplari_AnketGostergeler" ON "AnketGostergeCevaplari" ("AnketGosterge_Id" ASC)
;

ALTER TABLE "AnketGostergeler" ADD CONSTRAINT "PK_AnketGostergeler"
	PRIMARY KEY ("AnketGosterge_Id")
;

CREATE INDEX "IXFK_AnketGostergeler_AnketKriter" ON "AnketGostergeler" ("AnketKriter_Id" ASC)
;

ALTER TABLE "AnketSeviyeKarsilanmaDuzeyi" ADD CONSTRAINT "PK_AnketKarsilanmaDuzeyi_Id"
	PRIMARY KEY ("AnketKarsilanmaDuzeyi_Id")
;

CREATE INDEX "IXFK_AnketBoyut_Id" ON "AnketSeviyeKarsilanmaDuzeyi" ("AnketBoyut_Id" ASC)
;

CREATE INDEX "IXFK_AnketKriter_Id" ON "AnketSeviyeKarsilanmaDuzeyi" ("AnketKriter_Id" ASC)
;

CREATE INDEX "IXFK_AnketModel_Id" ON "AnketSeviyeKarsilanmaDuzeyi" ("AnketModel_Id" ASC)
;

CREATE INDEX "IXFK_ModelSeviye_Id" ON "AnketSeviyeKarsilanmaDuzeyi" ("ModelSeviye_Id" ASC)
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "PK_Eslesmeler"
	PRIMARY KEY ("Eslesme_Id")
;

CREATE INDEX "IXFK_Eslesmeler_Boyutlar" ON "Eslesmeler" ("Boyut_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_GostergeCervabinaOneriler" ON "Eslesmeler" ("GostergeCevabinaOneriler_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_GostergeCevaplari" ON "Eslesmeler" ("GostergeCevap_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_Gostergeler" ON "Eslesmeler" ("Gosterge_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_Kriterler" ON "Eslesmeler" ("Kriter_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_KullanıcıTurleri" ON "Eslesmeler" ("KullaniciTuru_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_Modeller" ON "Eslesmeler" ("Model_Id" ASC)
;

CREATE INDEX "IXFK_Eslesmeler_Seviyeler" ON "Eslesmeler" ()
;

CREATE INDEX "IXFK_Eslesmeler_Seviyeler_02" ON "Eslesmeler" ()
;

CREATE INDEX "IXFK_Eslesmeler_Seviyeler_03" ON "Eslesmeler" ("Seviye_Id" ASC)
;

ALTER TABLE "HastaneModel" ADD CONSTRAINT "PK_HastaneModel_Id"
	PRIMARY KEY ("HastaneModel_Id")
;

CREATE INDEX "IXFK_HastaneModel_Hastane_Id" ON "HastaneModel" ("Hastane_Id" ASC)
;

CREATE INDEX "IXFK_HastaneModel_Model_Id" ON "HastaneModel" ("Model_Id" ASC)
;

ALTER TABLE "HastaneModelKullanicilar" ADD CONSTRAINT "PK_HastaneModelKullanici_Id"
	PRIMARY KEY ("HastaneModelKullanici_Id")
;

CREATE INDEX "IXFK_HastaneModel_Id" ON "HastaneModelKullanicilar" ("HastaneModel_Id" ASC)
;

CREATE INDEX "IXFK_HastaneModelKullaniciler_Kullanici_Id" ON "HastaneModelKullanicilar" ("Kullanici_Id" ASC)
;

CREATE INDEX "IXFK_HastaneModelKullaniciler_KullanıcıTuru_Id" ON "HastaneModelKullanicilar" ("KullaniciTuru_Id" ASC)
;

ALTER TABLE "ModelKullaniciKapsami" ADD CONSTRAINT "PK_ModelKullaniciKapsami_Id"
	PRIMARY KEY ("ModelKullaniciKapsami_Id")
;

CREATE INDEX "IXFK_KullaniciTuru_Id" ON "ModelKullaniciKapsami" ("KullaniciTuru_Id" ASC)
;

CREATE INDEX "IXFK_Model_Id" ON "ModelKullaniciKapsami" ("Model_Id" ASC)
;

ALTER TABLE "ModelSeviye" ADD CONSTRAINT "PK_ModelSeviye_Id"
	PRIMARY KEY ("ModelSeviye_Id")
;

CREATE INDEX "IXFK_Model_Id" ON "ModelSeviye" ("Model_Id" ASC)
;

CREATE INDEX "IXFK_Seviye_Id" ON "ModelSeviye" ("Seviye_Id" ASC)
;

/* Create Foreign Key Constraints */

ALTER TABLE "Boyutlar" ADD CONSTRAINT "FK_Boyut_Id_Hiyerarsi"
	FOREIGN KEY ("Boyut_Id_Hiyerarsi") REFERENCES "Boyutlar" ("Boyut_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Boyutlar" ADD CONSTRAINT "FK_UstBoyut_Id"
	FOREIGN KEY ("UstBoyut_Id") REFERENCES "Boyutlar" ("Boyut_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCervabinaOneriler" ADD CONSTRAINT "FK_GostergeCevap_Id"
	FOREIGN KEY ("GostergeCevap_Id") REFERENCES "GostergeCevaplari" ("GostergeCevap_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCervabinaOneriler" ADD CONSTRAINT "FK_KullanıcıTuru_Id"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCervabinaOneriler" ADD CONSTRAINT "FK_UstGostergeCervabinaOneriler_Id"
	FOREIGN KEY ("UstGostergeCevabinaOneriler_Id") REFERENCES "GostergeCervabinaOneriler" ("GostergeCevabinaOneriler_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevapSablonu" ADD CONSTRAINT "FK_GostergeCevapSablonu_Id"
	FOREIGN KEY ("UstGostergeCevapSablonu_Id") REFERENCES "GostergeCevapSablonu" ("GostergeCevapSablonu_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevapSablonu" ADD CONSTRAINT "FK_GostergeCevapTuru_Id"
	FOREIGN KEY ("GostergeCevapTuru_Id") REFERENCES "GostergeCevapTuru" ("GostergeCevapTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Gostergeler" ADD CONSTRAINT "FK_GostergeCevapTuru_Id"
	FOREIGN KEY ("KriterCevapTuru_Id") REFERENCES "GostergeCevapTuru" ("GostergeCevapTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Gostergeler" ADD CONSTRAINT "FK_UstGosterge_Id"
	FOREIGN KEY ("UstGosterge_Id") REFERENCES "Gostergeler" ("Gosterge_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hastaneler" ADD CONSTRAINT "FK_HastaneTuru_Id"
	FOREIGN KEY ("HastaneTuru_Id") REFERENCES "HastaneTurleri" ("HastaneTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hastaneler" ADD CONSTRAINT "FK_Sehir_Id"
	FOREIGN KEY ("Sehir_Id") REFERENCES "Sehirler" ("Sehir_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hastaneler" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hizmetler" ADD CONSTRAINT "FK_HastaneTuru_Id"
	FOREIGN KEY ("HastaneTuru_Id") REFERENCES "HastaneTurleri" ("HastaneTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hizmetler" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Hizmetler" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KarsilanmaDuzeyi" ADD CONSTRAINT "FK_KarsilanmaDuzeyi_Eslesmeler"
	FOREIGN KEY ("Eslesme_Id") REFERENCES "Eslesmeler" ("Eslesme_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KarsilanmaDuzeyi" ADD CONSTRAINT "FK_KarsilanmaDuzeyi_Seviyeler"
	FOREIGN KEY ("Seviye_Id") REFERENCES "Seviyeler" ("Seviye_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KarsilanmaDuzeyi" ADD CONSTRAINT "FK_UstKarsilanmaDuzeyi_Id"
	FOREIGN KEY ("UstKarsilanmaDuzeyi_Id") REFERENCES "KarsilanmaDuzeyi" ("KarsilanmaDuzeyi_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Kriterler" ADD CONSTRAINT "FK_Kriter_Id"
	FOREIGN KEY ("UstKriter_Id") REFERENCES "Kriterler" ("Kriter_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Kriterler" ADD CONSTRAINT "FK_ModelSeviye_Id"
	FOREIGN KEY () REFERENCES  () ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Kullanicilar" ADD CONSTRAINT "FK_KullaniciTuru_Id"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Kullanicilar" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KullanicilarRoller" ADD CONSTRAINT "FK_Kullanici_Id"
	FOREIGN KEY ("Kullanici_Id") REFERENCES "Kullanicilar" ("Kullanici_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KullanicilarRoller" ADD CONSTRAINT "FK_Rol_Id"
	FOREIGN KEY ("Rol_Id") REFERENCES "Roller" ("Rol_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelHastaneTuru" ADD CONSTRAINT "FK_HastaneTuru_Id"
	FOREIGN KEY ("HastaneTuru_Id") REFERENCES "HastaneTurleri" ("HastaneTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelHastaneTuru" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Modeller" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("UstModel_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Modeller" ADD CONSTRAINT "FK_ModelTuru_Id"
	FOREIGN KEY ("ModelTuru_Id") REFERENCES "ModelTuru" ("ModelTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelUlke" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelUlke" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "OdemeBilgileri" ADD CONSTRAINT "FK_Kullanici_Id"
	FOREIGN KEY ("Kullanici_Id") REFERENCES "Kullanicilar" ("Kullanici_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "RolYetki" ADD CONSTRAINT "FK_Rol_Id"
	FOREIGN KEY ("Rol_Id") REFERENCES "Roller" ("Rol_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "FK_Gosterge_Id"
	FOREIGN KEY ("Gosterge_Id") REFERENCES  () ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "FK_GostergeCevapTuru_Id"
	FOREIGN KEY ("GostergeCevapTuru_Id") REFERENCES "GostergeCevapTuru" ("GostergeCevapTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "FK_KullaniciTuru_Id"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "FK_ModelBoyutKriterGosterge_Id"
	FOREIGN KEY ("ModelBoyutKriterGosterge_Id") REFERENCES  () ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "GostergeCevaplari" ADD CONSTRAINT "FK_Ust_GostergeCevap_Id"
	FOREIGN KEY ("UstGostergeCevap_Id") REFERENCES "GostergeCevaplari" ("GostergeCevap_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneTurleri" ADD CONSTRAINT "FK_HastaneTuru_Id"
	FOREIGN KEY ("UstHastaneTuru_Id") REFERENCES "HastaneTurleri" ("HastaneTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "KullanıcıTurleri" ADD CONSTRAINT "FK_Ust_KullanıcıTuru_Id"
	FOREIGN KEY ("UstKullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Sehirler" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Seviyeler" ADD CONSTRAINT "FK_Seviye_Id"
	FOREIGN KEY ("UstSeviyel_Id") REFERENCES "Seviyeler" ("Seviye_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "UlkelerDiller" ADD CONSTRAINT "FK_Dil_Id"
	FOREIGN KEY ("Dil_Id") REFERENCES "Diller" ("Dil_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "UlkelerDiller" ADD CONSTRAINT "FK_Ulke_Id"
	FOREIGN KEY ("Ulke_Id") REFERENCES "Ulkeler" ("Ulke_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Fatura" ADD CONSTRAINT "FK_Hastane_Id"
	FOREIGN KEY ("Hastane_Id") REFERENCES "Hastaneler" ("Hastane_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Fatura" ADD CONSTRAINT "FK_Siparis_Id"
	FOREIGN KEY ("Siparis_Id") REFERENCES "Siparis" ("Siparis_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneDegerlendirme" ADD CONSTRAINT "FK_Hastane_Id"
	FOREIGN KEY ("Hastane_Id") REFERENCES "Hastaneler" ("Hastane_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneDegerlendirme" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Odemeler" ADD CONSTRAINT "FK_Fatura_Id"
	FOREIGN KEY ("Fatura_Id") REFERENCES "Fatura" ("Fatura_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Sepet" ADD CONSTRAINT "FK_Hastane_Id"
	FOREIGN KEY ("Hastane_Id") REFERENCES "Hastaneler" ("Hastane_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Sepet" ADD CONSTRAINT "FK_Hizmet_Id"
	FOREIGN KEY ("Hizmet_Id") REFERENCES "Hizmetler" ("Hizmet_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Sepet" ADD CONSTRAINT "FK_Kullanici_Id"
	FOREIGN KEY ("Kullanici_Id") REFERENCES "Kullanicilar" ("Kullanici_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "SiparişSepeti" ADD CONSTRAINT "FK_Sepet_Id"
	FOREIGN KEY ("Sepet_Id") REFERENCES "Sepet" ("Sepet_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "SiparişSepeti" ADD CONSTRAINT "FK_Siparis_Id"
	FOREIGN KEY ("Siparis_Id") REFERENCES "Siparis" ("Siparis_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketBoyut" ADD CONSTRAINT "FK_AnketModel_Id"
	FOREIGN KEY ("AnketModel_Id") REFERENCES "AnketModel" ("AnketModel_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketKriter" ADD CONSTRAINT "FK_AnketBoyut_Id"
	FOREIGN KEY ("AnketBoyut_Id") REFERENCES "AnketBoyut" ("AnketBoyut_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketModel" ADD CONSTRAINT "FK_HastaneModel_Id"
	FOREIGN KEY ("HastaneModel_Id") REFERENCES "HastaneModel" ("HastaneModel_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketGostergeCevaplari" ADD CONSTRAINT "FK_AnketGostergeCevaplari_AnketGostergeler"
	FOREIGN KEY ("AnketGosterge_Id") REFERENCES "AnketGostergeler" ("AnketGosterge_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketGostergeler" ADD CONSTRAINT "FK_AnketGostergeler_AnketKriter"
	FOREIGN KEY ("AnketKriter_Id") REFERENCES "AnketKriter" ("AnketKriter_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketSeviyeKarsilanmaDuzeyi" ADD CONSTRAINT "FK_AnketBoyut_Id"
	FOREIGN KEY ("AnketBoyut_Id") REFERENCES "AnketBoyut" ("AnketBoyut_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketSeviyeKarsilanmaDuzeyi" ADD CONSTRAINT "FK_AnketKriter_Id"
	FOREIGN KEY ("AnketKriter_Id") REFERENCES "AnketKriter" ("AnketKriter_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "AnketSeviyeKarsilanmaDuzeyi" ADD CONSTRAINT "FK_AnketModel_Id"
	FOREIGN KEY ("AnketModel_Id") REFERENCES "AnketModel" ("AnketModel_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_Boyutlar"
	FOREIGN KEY ("Boyut_Id") REFERENCES "Boyutlar" ("Boyut_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_GostergeCervabinaOneriler"
	FOREIGN KEY ("GostergeCevabinaOneriler_Id") REFERENCES "GostergeCervabinaOneriler" ("GostergeCevabinaOneriler_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_GostergeCevaplari"
	FOREIGN KEY ("GostergeCevap_Id") REFERENCES "GostergeCevaplari" ("GostergeCevap_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_Gostergeler"
	FOREIGN KEY ("Gosterge_Id") REFERENCES "Gostergeler" ("Gosterge_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_Kriterler"
	FOREIGN KEY ("Kriter_Id") REFERENCES "Kriterler" ("Kriter_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_KullanıcıTurleri"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_Modeller"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "Eslesmeler" ADD CONSTRAINT "FK_Eslesmeler_Seviyeler"
	FOREIGN KEY ("Seviye_Id") REFERENCES "Seviyeler" ("Seviye_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneModel" ADD CONSTRAINT "FK_Hastane_Id"
	FOREIGN KEY ("Hastane_Id") REFERENCES "Hastaneler" ("Hastane_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneModel" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneModelKullanicilar" ADD CONSTRAINT "FK_HastaneModel_Id"
	FOREIGN KEY ("HastaneModel_Id") REFERENCES "HastaneModel" ("HastaneModel_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneModelKullanicilar" ADD CONSTRAINT "FK_Kullanici_Id"
	FOREIGN KEY ("Kullanici_Id") REFERENCES "Kullanicilar" ("Kullanici_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "HastaneModelKullanicilar" ADD CONSTRAINT "FK_KullanıcıTuru_Id"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES  () ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelKullaniciKapsami" ADD CONSTRAINT "FK_KullaniciTuru_Id"
	FOREIGN KEY ("KullaniciTuru_Id") REFERENCES "KullanıcıTurleri" ("KullaniciTuru_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelKullaniciKapsami" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelSeviye" ADD CONSTRAINT "FK_Model_Id"
	FOREIGN KEY ("Model_Id") REFERENCES "Modeller" ("Model_Id") ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE "ModelSeviye" ADD CONSTRAINT "FK_Seviye_Id"
	FOREIGN KEY ("Seviye_Id") REFERENCES "Seviyeler" ("Seviye_Id") ON DELETE No Action ON UPDATE No Action
;

/* Create Table Comments, Sequences for Autonumber Columns */

COMMENT ON COLUMN "Boyutlar"."Hiyerarsi"
	IS 'Hiyerarsi niteliği, model, vb. konudaki seviyeden farklı. buradaki hiyerarsi, sadece boyutları hiyerarşik olarak göstermek istediğimizde JS, vb. TreeView komponentlerin kullandığı hiyerarşi seviyesini veritabanında tutmak içindir.'
;

 

 

 

COMMENT ON TABLE "GostergeCevapSablonu"
	IS 'Bu tablodaki şablonlar, sadece göstergelere verilecek cevapları değil, bu cevapların arşılık geldiklerin puanları da şablon olarak barındıracak. Bu sayede, ilgili cevap türü seçildiğinde, her bir cevap için karşılık gelen puanlar da GöstergeCevap tablosuna kaydedilecek. Ancak Model Yöneticisi dilerse bu puan dağılımını değiştirebilecek.'
;

COMMENT ON COLUMN "GostergeCevapSablonu"."GostergeCevapSablonAdi"
	IS '
	1. Evet/Hayır
	2. K/KK/KM (Karşılıyor/KısmenKarılıyor/Karşılamıyor)
	3. Yüzde (Sayısal)
	4. Yüzde (Kademeli)
	5. Beşli Likert'
;

COMMENT ON COLUMN "GostergeCevapSablonu"."GöstergeCevapAdi"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

COMMENT ON COLUMN "GostergeCevapSablonu"."GostergeCevapPuani"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

 

COMMENT ON TABLE "Gostergeler"
	IS 'Her bir Göstergenin:

	1. Adı
	2. Anket sorusu
	3. Anket sorunun açıklaması (mümkünse içerisinde örneklerin, benzetmelerin yer aldığı birkaç paragraflık bir açıklama olmalı)
	4. ÖNEMLİ: Seviye: İlgili göstergenin cevabının/cevaplarının karşılık geldiği seviye (Örneğin Seviye 1- 7 seviye üzerinden, vb). Ancak bu özellik, kriterlerin bir boyuta veya boyutla birlikte bir modele atanması sırasında veya atanmasından sonra verilebilir.
	5. ÖNEMLİ: Etki düzeyi: Bazı göstergeler, tekabül ettikleri seviye için zorunlu, majör eksiklik veya minör eksiklik gibi özelliklere sahip olabiliyor. Dolayısıyla bu özellik de yer almalı (Bu alan, ilgili göstergenin boyuta atandığı sırada veya boyutların modele atanmasından sonra veya o sırada yapılabilir)
	6. ÖNEMLİ: Tavsiye cümlesi: Bu göstergenin anketteki her bir cevabı için (likertli cevaplarda her bir likert seçimi için) Gap Analiz Raporunda otomatik olarak yerleştirilecek olan ayrı bir öneri/tavsiye cümlesi olmalı. (Bu alan, ilgili göstergenin boyuta atandığı sırada veya boyutların modele atanmasından sonra veya o sırada yapılabilir)
	7. ÖNEMLİ: SKS Uyumluluğu: SKS gibi yapılarda kriterle ilgili hiyerarşi şu şekilde: Boyut, Bölüm, Standart, Değerlendirme Ölçütü, Karşılama Durumu (Standart ve göstergelerin karşılanma düzeyleri üç kategoride ele alınır: Karşılanıyor (K), Kısmen Karşılanıyor, (KK), Karşılanmıyor (KM)), Puan.
	8. ÖNEMLİ: Standart Türü: SKS''de Standart Türü gibi bir özellik de var (Çekirdek Standart, vs.)
	9. Etiket: Kriterleri bıyutllara atarken veya birbirine benzer kriterler aratırken yararlanacağımız etiketler tanımlanmalı. Bu etiketler, tek bir nitelik/alan içerisinde ";" işareti ile ayrıştırılarak tanımlanabilir.


AĞIRLIKLAR: (Not: Bir kriterin ağırlığı, bir boyuta atandıktan sonra tanımlanır. Bir kriterin her boyut için ağırlığı farklı olabilir. Dolayısıyla, krtiterlerin BİRDEN FAZLA AĞIRLIĞI OLABİLİR. 
Her boyuta göre iki türlü ağırlık tanımlanır:

	1. Ortalama Ağırlık (Başka ekranda tanımlanacak)
	2. Gerçek Ağırlık (Başka ekranda tanımlanacak)'
;

COMMENT ON COLUMN "Gostergeler"."GostergeAdi"
	IS 'GostergeAdı, göstergenin soru veya gereksinim cümlesidir.
Örnek soru:
"Hastalar ile hekimler arasında etkileşimi artırmak amacıyla mesajlaşma fonksiyonu bulunmaktadır 
Lütfen yüzdeyi belirtiniz:"
Bu tür bir kayıtta KriterCevapTuru alanında "Beşli Likert" seçili olabilir.

Örnek Soru: "HBYS''de saklanan ve hekimlerin eriştiği Laboratuvar, Radyoloji ve Kardiyoloji raporlarının yüzdesini yazınız" 
Bu tür bir kayıtta KriterCevapTuru alanında "Yüzde" seçili olabilir.

0%
1-25 %
26-49 %
50-94 %
95-100 %'
;

COMMENT ON COLUMN "Gostergeler"."GostergeEtiketleri"
	IS 'Bir gösterge tanımlandığında onun hangi kriterler girebileceğine dair çağrılım yapmaıs için etiketler kullanacağız.'
;

 

COMMENT ON COLUMN "Hastaneler"."AcilServisSeviyesi"
	IS 'Burada ComboBox ile aşağıdaki seçenkler gösterilebilir:
1. Seviye
2. Seviye
3. Seviye'
;

COMMENT ON COLUMN "Hastaneler"."YBUSeviyesi"
	IS 'Burada ComboBox ile aşağıdaki seçenkler gösterilebilir:
1. Seviye
2. Seviye
3. Seviye'
;

 

COMMENT ON TABLE "Hizmetler"
	IS 'Hizmet tanıtım ve sepete ekleme ekranlarında sırasıyla şunları soracağız:
1. Ülke
2. Hastane türü
3. Ülke ve hastane türüne uygun olan modeller listelenecek ve model seçimi yapılacak
4. Ardından bu hizmeti hangi hastane için dolduracağı sorulacak ve daha önce seçilmiş olan ülkedeki hastaneler listelenecek.
5. Seçilen model ilgili hastane için doldurulmak üzere sepete eklenecek.'
;

 

COMMENT ON TABLE "KarsilanmaDuzeyi"
	IS 'Kriterlerin yerine getirilip getirilmediği konusunun nasıl kesin olarak ölüleceği net değil. Buraya eklenecek ve ModelBoyutKriter tablosu ile Kriterler tablosu arasına eklenecek bir tabloda Fully Enabled, Mostly Enabled... gibi seçeneklerin karşılığı olan asgari puanları buraya yazabiliriz.'
;

COMMENT ON COLUMN "KarsilanmaDuzeyi"."Eslesme_Id"
	IS 'Model, Boyut ve Kriterlerin karşılanma düzeylerinin sınırlarını (mak-min puanlarını) bu tabloda tutuyoruz. Bu nedenle bir Eslesmeler tablosundaki bir kaydın birden fazla karşılanma düzeyi olabilecektir. Bu detaylar da Karşılanma Düzeyi tablosunda tutulacaktır.'
;

COMMENT ON COLUMN "KarsilanmaDuzeyi"."Seviye_Id"
	IS 'Modelin ve boyutların karşılanma düzeyi kimi modellerde seviye ile ilişkilendiririlebilir. Bu durumda Her bir model ve model altındaki her bir boyut için seviyeler tablosu ile ilişkili şekilde min-maks değerler vs belirlenip karşılanma düzeyinin adı yazılmalı.'
;

COMMENT ON COLUMN "KarsilanmaDuzeyi"."Turu"
	IS '	- Model
	- Boyut
	- Kriter'
;

COMMENT ON COLUMN "KarsilanmaDuzeyi"."KarsilanmaDuzeyi"
	IS 'Eğer model puan esaslı ise göstergelerden itibaren hesaplanan puanların karşılık geldiği aralık (maksimum-minimum) burada tanımlanır ve bu puan aralığına denk gelen Karşılanma düzryi ifadesi bu alana (KarsilanmaDuzeyi) yazılır. Örneğin SKS''de Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi ifadeler bu alan yazılır. Seviye esaslı modellerde de benzer şekilde puan aralıkları oluşturulur ve her aralıa denk gelen ifadeler uygun şekilde yazılır. 
Bu formda farklı dilllerde giriş yapacğaımız zaman, minimum-maksimum puanlar vs yeniden girilmez, sadece KarsilanmaDuzeyi alanı farklı dilde yazılır.'
;

COMMENT ON COLUMN "KarsilanmaDuzeyi"."DilAdi"
	IS 'Burada maksimum-minimum puanlar dil değiştiğinde sabit kalıyor. BU nedenle yeni dil eklentisi tanımladığımızda sadece Karşılanma Düzeyi (Varchar) kısmında değişklik yapılacak.'
;

 

 

 

COMMENT ON COLUMN "Kullanicilar"."Ulke_Id"
	IS 'Kullanıcı ilk kayıt olduğunda ülkesini seçmeli. İlk giriş yaptığında ise, bu ülkeye tanımlanmış olan modelleri listeleyip inceleyip onlardan birini sepete ekleyip ödemesini yapabilmeli. Daha sonra da ilgili modele kullanıcı delege edebilmeli.'
;

COMMENT ON COLUMN "Kullanicilar"."ePostaDogrulandi"
	IS 'Kayıt süreci içerisinde kullanıcı e-postasının doğrulanması gerekiyor. Kayıt ilk açıldığında bu alan 0 set edilir, doğrulama linki çalıştığında bu alan 1 yapılır. '
;

COMMENT ON COLUMN "Kullanicilar"."IrtibatTercihi"
	IS 'Seçenekler (ikon şeklinde): 
	- Telefon
	- ePosta'
;

COMMENT ON COLUMN "Kullanicilar"."ArayuzDilAdi"
	IS 'Kullanıcının profilinde seçmiş olduğu "Arayüz Dili" seçeneği buraya kaydedilmeli. Bu seçenek, ekran görünümünü bağlamaktadır.'
;

COMMENT ON COLUMN "Kullanicilar"."DilAdi"
	IS 'Kullanıcının profilinde seçmiş olduğu "Model/Anket Dili" seçeneği buraya kaydedilmeli. Bu seçenek, anketlerin soruları, vb. içerikle ilgilidir.'
;

 

 

 

COMMENT ON COLUMN "Modeller"."KullaniciKapsami"
	IS '	- Hastane adına tek anket
	- Farklı kullanıcı türlerine göre özelleşmiş anket

Eğer ikincisi seçilirse, bu model ile Kullanıcı türü tablosu arasındaki tablo (ModelKullaniciTuru) ilgili kullanıcı türleri seçilerek doldurulur. 
Bu sayede, ilgili anket herhangi bir hastane için atanırken (oluşturulurken) her bir kullanıcı türü içn tanımlanan anket boyut, kriter ve göstergeleri ayrı ayrı oluşturulur.'
;

 

COMMENT ON COLUMN "ModelUlke"."DevreyeAlmaTarihi"
	IS 'Modelin ilgili ülkedeki devreye alma tarihi'
;

COMMENT ON COLUMN "ModelUlke"."Aktif"
	IS 'Bir modelin, bir ülkede geçerli olması için, ilgili ülkeye atanması gerekir.
Kayıt ilk defa açıldığında Aktif=0 set edilir.
Ülke atama işlemleri bu tabloda tutulur. Ama işlemi geçerli oldıuğunda Aktif=1 set edilir.'
;

 

COMMENT ON COLUMN "OdemeBilgileri"."KartNumarasi"
	IS 'Burada bir POS entegrasyonu olmalı ve kart bilgileri yerelde tutulmamalı. Şimdilik sadece bu alanların arayüzde olacağını belirtmek için not ediyoruz.'
;

COMMENT ON COLUMN "OdemeBilgileri"."SonKullanmaTarihi"
	IS 'Burada bir POS entegrasyonu olmalı ve kart bilgileri yetrelde tutulmamalı. Şimdilik sadece bu alanların arayzde olacağını belirtmek için not ediyoruz.'
;

 

COMMENT ON COLUMN "Roller"."RolAdi"
	IS '	- Model Yöneticisi
	- Anket Yöneticisi
	- Muhasebeci
	- Model Kalite Uzmanı
	- Hastane Kullanıcısı'
;

 

 

COMMENT ON TABLE "GostergeCevaplari"
	IS 'Bir kriter (ve onun altındaki göstergeler), farklı model ve boyutların altına tanımlanabilir. Her tanımlandığında da ayrı;

	1. Ağırlığı
	2. Seviye karşılığı (Seviye 0, ...7, vb.)
	3. İlgili seviye için önemi (minör, majör, zorunlu)
	4. Puanı

olabilir. Bütün bu nitelikler bu tabloda yer alır.'
;

COMMENT ON COLUMN "GostergeCevaplari"."GostergeCevapOnemi"
	IS '	- Minör
	- Majör
	- Zorunlu'
;

COMMENT ON COLUMN "GostergeCevaplari"."GostergeCevapAdi"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

COMMENT ON COLUMN "GostergeCevaplari"."GostergeCevapPuani"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

COMMENT ON COLUMN "GostergeCevaplari"."DilAdi"
	IS 'İlk kayıt açıldığında defauyls dil Türkçe olacak. Ancak aynı seçenek için başka dilde kayıt açılması istenirse yeni kayıt alılırken, UstGosterge_Id olarak ilk kayı seçip dil seçeneği ve GostergeCevapAdi alanları doldurulark kayıt açılacak.'
;

 

COMMENT ON COLUMN "GostergeCevapTuru"."GostergeCevapTuru"
	IS '
	1. Evet/Hayır
	2. K/KK/KM (Karşılıyor/KısmenKarılıyor/Karşılamıyor)
	3. Yüzde (Sayısal)
	4. Yüzde (Kademeli)
	5. Beşli Likert'
;

 

COMMENT ON TABLE "HastaneTurleri"
	IS 'Hastane Türlerinin, ülkelere göre değişmesi muhtemel. Ancak Biz burada genel türleri esas alarak, hastanelerin kendilerine en yakın hastane türünü seçmesini bekleyeceğiz. Örneğin içerisinde YBÜ, acil, vb. olmayan FTR hastanesi için ayrı bir tür olsa da, diğer branş hastaneleri için genel bir branş hastanesi türü yeterli olacaktır.'
;

 

COMMENT ON TABLE "KullanıcıTurleri"
	IS '
	1. Genel değerlendirme (Hastane için tek ölçüm)
	2. Üç aktörlü değerlendirme (Sağlık/Klinik, İdari, Teknik)'
;

 

COMMENT ON COLUMN "ModelTuru"."ModelTuruAdi"
	IS '	- Puan esaslı
	- Seviye esaslı'
;

 

 

 

 

COMMENT ON COLUMN "UlkelerDiller"."Varsayilan"
	IS 'Her ülkenin sadece bir tane varsayılan dili olmalı. Ama ülke için birden fazla dil tanımlanabilir. Bu sayede, örneğin Türkiye''deki bir hastane, tercih ederse anket formunu açtığında, birden fazla dil seçeneği ile karşısına gelen ankette, aynı sorunun diğer uygun dildeki versiyonunu da görebilir.'
;

 

COMMENT ON TABLE "Fatura"
	IS 'Bir sipariş için birden fazla fatura kesilebilir.
Bu özellikle siparişte yer alan hizmetler için parça parça fatura kesilmesi gerektiğinde söz konusu olabilir. Örneğin anket için ayrı, validasyon için ayrı fatura kesilebilir.

Burada bir panel olabilir bir de form ile detaylar gösterilebilir.
Panelde; 
Fatura sayısı, toplam fatura tutarı, toplam ödemeler, bakiyeler, vs gösterilir. 
Formda;
Filtrelenip seçilen hastaneye kesilen faturalar, fatura detayları (hizmetler, tutarlar, vb.) ile faturalara mukabil ödemeler tek bir ekranda gösterilebilir. '
;

COMMENT ON COLUMN "Fatura"."PDF_Linki"
	IS 'Link veya dosya dizini'
;

COMMENT ON COLUMN "Fatura"."FaturaAGonderimYolu"
	IS '	- Elektronik Fatura
	- e-Posta
	- Posta
	- Diğer'
;

 

 

 

COMMENT ON TABLE "Odemeler"
	IS 'Ödeme işlemi tamamlandıktan sonra, muhasebe personeli tarafından ilgili kullanıcıya, o kullanıcının sipariş sırasında seçtiği hastane için seçtiği model atanır (delege edilir)'
;

COMMENT ON COLUMN "Odemeler"."OdemeKanali"
	IS '	- EFT
	- Havale
	- Swift
	- Nakit'
;

COMMENT ON COLUMN "Odemeler"."Kaydeden"
	IS 'Kullanicilar tablosundaki "Kullanici_Id"'
;

 

 

COMMENT ON TABLE "Siparis"
	IS 'Burada ödeme bilgisi şirketin muhasebesindeki uzman tarafından kontrol edilecek. '
;

COMMENT ON COLUMN "Siparis"."SiparişNo"
	IS 'Sipariş alındığında üretilen ve faturada da yer alması beklenen alfanümerik değer'
;

COMMENT ON COLUMN "Siparis"."OdemeKanali"
	IS '	- EFT
	- Havale
	- Swift
	- Nakit'
;

COMMENT ON COLUMN "Siparis"."OdemeDurumu"
	IS '	- Ödenmedi
	- Kısmen ödendi
	- Ödendi'
;

COMMENT ON COLUMN "Siparis"."SiparisDurumu"
	IS '	- İptal edildi
	- Sipariş edildi (İrtibat Bekleniyor)
	- İrtibat kuruldu
	- Ödeme bekleniyor
	- Ödeme Yapıldı'
;

 

 

COMMENT ON COLUMN "AnketBoyut"."Agirligi"
	IS 'Eslesmeler tablosunda ilgili Boyut tanımlanırken, altında yer aldığı Model içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.'
;

 

COMMENT ON COLUMN "AnketKriter"."Agirligi"
	IS 'Eslesmeler tablosunda ilgili Kriter tanımlanırken, altında yer aldığı boyut içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.'
;

 

COMMENT ON COLUMN "AnketModel"."AnketSeriNo"
	IS 'Anket oluşturulduğunda, anket için oluşturulan tekil numara. Ankete delege olan kişiler'
;

 

COMMENT ON COLUMN "AnketGostergeCevaplari"."AnketGostergeCevapAdi"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

COMMENT ON COLUMN "AnketGostergeCevaplari"."AnketGostergeCevapPuani"
	IS '
	1. Eğer model Puan Esaslı ise (SKS gibi) burada Tamamen Karşılanıyor, Kısmen Karşılanıyor ve Karşılanmıyor gibi seçenekler ve bumların karşılığı olan puanlar yer alabilir.
	2. Eğer model seviye esaslı ise, bu defa göstergenin cevap seçeneklerine göre (örneğin beşli likert, vb.) ayrı ayrı puan ataması yapılır.


Her iki durumda da puan bilgisi GöstergeCevapPuani alanına yazılır.'
;

COMMENT ON COLUMN "AnketGostergeCevaplari"."AnketGostergeCevapOnemi"
	IS '	- Minör
	- Majör
	- Zorunlu'
;

COMMENT ON COLUMN "AnketGostergeCevaplari"."Secildi"
	IS 'Başlangıçta bu alan boş gelir. Kullanıcı her bir göstergenin cevaplarından sadece birini seçebilir. Seçilenin puanı bu göstergenin ait olduğu kriterin puanının hesaplamasına dahil edilir.'
;

 

 

COMMENT ON COLUMN "AnketGostergeler"."Agirligi"
	IS 'Eslesmeler tablosunda ilgili Gösterge tanımlanırken, altında yer aldığı Kriter içerisindeki ağırlığı bu alana yazılmıştır. Bu değer okunarak bu tabloya kaydedilir.'
;

 

 

COMMENT ON COLUMN "AnketSeviyeKarsilanmaDuzeyi"."Turu"
	IS '	- Model
	- Boyut
	- Kriter'
;

COMMENT ON COLUMN "AnketSeviyeKarsilanmaDuzeyi"."KarsilanmaDuzeyi"
	IS 'KarsilanmaDuzeyi tablosundaki min-maks kriterlere göre göstergelerin sonuçlarında yola çıkarak kriterrin, kriterlerin sonuçlarından yola çıkarak boyutların, boyutların sonuçlarından yola çıkarak da modelin karşılanma düzeyi hesaplanır.

Modelin türüne göre ve kriter için ltanımlanan karşılanma düzeyine göre burada bir metin elde edilir.
Ama bu sonuç GAP raporu üretileceği zaman oluşturulur.
GAP raporunda sadece model, boyut ve kriter karşılanma düzeyi gösterilir. Göstergeler rapora yansıtılmaz.'
;

 

COMMENT ON COLUMN "Eslesmeler"."Seviye_Id"
	IS 'Eşleşmeler yapılırken, özellikle Kriterler için, karşı geldikleri seviye yazılır. Ancak ilgili kriterin (veya boyutun) karşılanma düzeyi aşağıdaki tabloda mak-min puan aralıklarıyla bilrikte ayrıca kayda alınmalıdır.'
;

COMMENT ON COLUMN "Eslesmeler"."Turu"
	IS '	- Model
	- Boyut
	- Kriter
	- Gösterge
	- Gösterge Cevap
	- Gösterge Cevap Öneri'
;

 

 

 

 

 

 

 

 

 

COMMENT ON TABLE "HastaneModel"
	IS 'Anket Yöneticisi, önce bu anketi hastaneye atayacak. Atama sırasında anketin dilini seçecek.'
;

COMMENT ON COLUMN "HastaneModel"."DilAdi"
	IS 'Bir hastaneye aynı anket sadece bir dilde atanır. Atandığı dil de buraya yazılır. Bu sayede, anket fiziksel olarak oluşturulurken de ilgili taablolar aynı dile uygun olan ifadelerle doldurulur'
;

COMMENT ON COLUMN "HastaneModel"."SonGecerlilikTarihi"
	IS 'Anket tanımlanırken, belirli bir süreliğine açılıyor olabilir. Bu durumda bu tarih seçilir. İlgili anket hastane tarafından açılmak istendiğinde bu tarihin geçip geçmediği kontrol edilir.'
;

 

COMMENT ON TABLE "HastaneModelKullanicilar"
	IS 'Anket yönetiisi, anket için daha önceki mevcut kullanıcılardan veya kendisine iletilen kişlieri isim ve e-posta adreslerini yazarak delege eder. Bir ankete kullanıcı atamak (delege etmek) anketi fiziksel olarak oluşturma işlemini tetiklemiyor. sadece oluşturulmuş olan ankete kullanıcı atıyor.'
;

COMMENT ON COLUMN "HastaneModelKullanicilar"."KullaniciTuru_Id"
	IS 'Manuel eklenen ve delege edilen kullanıcılar için de Kullanıcı Türü seçilmeli.'
;

COMMENT ON COLUMN "HastaneModelKullanicilar"."KayitliKullanici"
	IS 'Hastane için tanımlanan anketletin daha önce mutlaka kayıtlı bir kullanıcı tarafından doldurulması ZARURİ DEĞİL. Dolayısıyla, sadece e-posta ve isim girerek de ankete DELEGE ATANABİLİR.
Eğer kayıtlı kullanıcı ise, listeden seçip kullanıcının adı-soyadı sisteme otomatik getirilir.'
;

 

 

COMMENT ON TABLE "ModelSeviye"
	IS 'Modeller için farklı sayıda seviye tanımlanabilir. Örneğin bir model 5 seviyeli, bir başkası 10 seviyeli olabilir. Bir modelin kaç seviyesi olacağı bilgisi bu tabloya kaydedilir. Daha sonra ilgili model için model, boyut, kriter eşleşmeleri yapılırken, ilgili kriterin hangi seviyeye tekabül ettiği veya karşılanma düzeyinin hangi seviye için olacağı bilgisi için seviyeler gösterilirken, bu tablodaki değerler Combo Box içerisinde gösterilir seçtirilir. Bu sayede, ilgili model için tanımlanmamış bir seviye için eşleşme veya karşılanma düzeyi tanımlaması yapılmaz. '
;

 
